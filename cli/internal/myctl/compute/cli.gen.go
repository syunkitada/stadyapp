// Package compute provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package compute

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"

	"github.com/spf13/cobra"
)

const (
	XAuthTokenHeaderScopes = "XAuthTokenHeader.Scopes"
)

// Defines values for GlanceImageStatus.
const (
	Active GlanceImageStatus = "active"
	Killed GlanceImageStatus = "killed"
	Queued GlanceImageStatus = "queued"
	Saving GlanceImageStatus = "saving"
)

// Defines values for GlanceImageVisibility.
const (
	Private GlanceImageVisibility = "private"
	Public  GlanceImageVisibility = "public"
)

// ActionServerRequest defines model for ActionServerRequest.
type ActionServerRequest struct {
	OsStart *map[string]interface{} `json:"os-start"`
	OsStop  *map[string]interface{} `json:"os-stop"`
}

// CreateServerRequest defines model for CreateServerRequest.
type CreateServerRequest struct {
	Server *struct {
		BlockDeviceMappingV2 []struct {
			BootIndex           *int                `json:"boot_index,omitempty"`
			DeleteOnTermination *bool               `json:"delete_on_termination,omitempty"`
			DestinationType     *string             `json:"destination_type,omitempty"`
			SourceType          *string             `json:"source_type,omitempty"`
			Uuid                *openapi_types.UUID `json:"uuid,omitempty"`
		} `json:"block_device_mapping_v2"`
		FlavorRef string             `json:"flavorRef"`
		ImageRef  openapi_types.UUID `json:"imageRef"`
		MaxCount  int                `json:"max_count"`
		MinCount  int                `json:"min_count"`
		Name      string             `json:"name"`
		Networks  []struct {
			Uuid *openapi_types.UUID `json:"uuid,omitempty"`
		} `json:"networks"`
	} `json:"server,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// GlanceImage defines model for GlanceImage.
type GlanceImage struct {
	Checksum                      *string                `json:"checksum,omitempty"`
	ContainerFormat               *string                `json:"container_format,omitempty"`
	CreatedAt                     *time.Time             `json:"created_at,omitempty"`
	DiskFormat                    *string                `json:"disk_format,omitempty"`
	File                          *string                `json:"file,omitempty"`
	Id                            *openapi_types.UUID    `json:"id,omitempty"`
	MinDisk                       *int32                 `json:"min_disk,omitempty"`
	MinRam                        *int32                 `json:"min_ram,omitempty"`
	Name                          *string                `json:"name,omitempty"`
	OsHashAlgo                    *string                `json:"os_hash_algo,omitempty"`
	OsHashValue                   *string                `json:"os_hash_value,omitempty"`
	OsHidden                      *bool                  `json:"os_hidden,omitempty"`
	Owner                         *string                `json:"owner,omitempty"`
	OwnerSpecifiedOpenstackMd5    *string                `json:"owner_specified.openstack.md5,omitempty"`
	OwnerSpecifiedOpenstackObject *string                `json:"owner_specified.openstack.object,omitempty"`
	OwnerSpecifiedOpenstackSha256 *string                `json:"owner_specified.openstack.sha256,omitempty"`
	Protected                     *bool                  `json:"protected,omitempty"`
	Schema                        *string                `json:"schema,omitempty"`
	Self                          *string                `json:"self,omitempty"`
	Size                          *int64                 `json:"size,omitempty"`
	Status                        *GlanceImageStatus     `json:"status,omitempty"`
	Stores                        *string                `json:"stores,omitempty"`
	Tags                          *[]string              `json:"tags,omitempty"`
	UpdatedAt                     *time.Time             `json:"updated_at,omitempty"`
	VirtualSize                   *int64                 `json:"virtual_size,omitempty"`
	Visibility                    *GlanceImageVisibility `json:"visibility,omitempty"`
}

// GlanceImageStatus defines model for GlanceImage.Status.
type GlanceImageStatus string

// GlanceImageVisibility defines model for GlanceImage.Visibility.
type GlanceImageVisibility string

// GlanceImageResponse defines model for GlanceImageResponse.
type GlanceImageResponse struct {
	Image *GlanceImage `json:"image,omitempty"`
}

// GlanceImagesResponse defines model for GlanceImagesResponse.
type GlanceImagesResponse struct {
	First  *string        `json:"first,omitempty"`
	Images *[]GlanceImage `json:"images,omitempty"`
	Schema *string        `json:"schema,omitempty"`
}

// GlanceVersion defines model for GlanceVersion.
type GlanceVersion struct {
	Id     string              `json:"id"`
	Links  []GlanceVersionLink `json:"links"`
	Status string              `json:"status"`
}

// GlanceVersionLink defines model for GlanceVersionLink.
type GlanceVersionLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// GlanceVersionResponse defines model for GlanceVersionResponse.
type GlanceVersionResponse struct {
	Versions []GlanceVersion `json:"versions"`
}

// NeutronNetwork defines model for NeutronNetwork.
type NeutronNetwork struct {
	AdminStateUp            *bool               `json:"admin_state_up,omitempty"`
	AvailabilityZoneHints   *[]string           `json:"availability_zone_hints,omitempty"`
	AvailabilityZones       *[]string           `json:"availability_zones,omitempty"`
	CreatedAt               *time.Time          `json:"created_at,omitempty"`
	Description             *string             `json:"description,omitempty"`
	Id                      *openapi_types.UUID `json:"id,omitempty"`
	Ipv4AddressScope        *string             `json:"ipv4_address_scope"`
	Ipv6AddressScope        *string             `json:"ipv6_address_scope"`
	Mtu                     *int                `json:"mtu,omitempty"`
	Name                    *string             `json:"name,omitempty"`
	ProjectId               *string             `json:"project_id,omitempty"`
	ProviderNetworkType     *string             `json:"provider:network_type,omitempty"`
	ProviderPhysicalNetwork *string             `json:"provider:physical_network"`
	ProviderSegmentationId  *int                `json:"provider:segmentation_id"`
	RevisionNumber          *int                `json:"revision_number,omitempty"`
	RouterExternal          *bool               `json:"router:external,omitempty"`
	Shared                  *bool               `json:"shared,omitempty"`
	Status                  *string             `json:"status,omitempty"`
	Subnets                 *[]string           `json:"subnets,omitempty"`
	Tags                    *[]string           `json:"tags,omitempty"`
	TenantId                *string             `json:"tenant_id,omitempty"`
	UpdatedAt               *time.Time          `json:"updated_at,omitempty"`
}

// NeutronNetworkResponse defines model for NeutronNetworkResponse.
type NeutronNetworkResponse struct {
	Network *NeutronNetwork `json:"network,omitempty"`
}

// NeutronNetworksResponse defines model for NeutronNetworksResponse.
type NeutronNetworksResponse struct {
	Networks *[]NeutronNetwork `json:"networks,omitempty"`
}

// NeutronSubnet defines model for NeutronSubnet.
type NeutronSubnet struct {
	AdminStateUp            *bool               `json:"admin_state_up,omitempty"`
	AvailabilityZoneHints   *[]string           `json:"availability_zone_hints,omitempty"`
	AvailabilityZones       *[]string           `json:"availability_zones,omitempty"`
	CreatedAt               *time.Time          `json:"created_at,omitempty"`
	Description             *string             `json:"description,omitempty"`
	Id                      *openapi_types.UUID `json:"id,omitempty"`
	Ipv4AddressScope        *string             `json:"ipv4_address_scope"`
	Ipv6AddressScope        *string             `json:"ipv6_address_scope"`
	Mtu                     *int                `json:"mtu,omitempty"`
	Name                    *string             `json:"name,omitempty"`
	ProjectId               *string             `json:"project_id,omitempty"`
	ProviderNetworkType     *string             `json:"provider:network_type,omitempty"`
	ProviderPhysicalNetwork *string             `json:"provider:physical_network"`
	ProviderSegmentationId  *int                `json:"provider:segmentation_id"`
	RevisionNumber          *int                `json:"revision_number,omitempty"`
	RouterExternal          *bool               `json:"router:external,omitempty"`
	Shared                  *bool               `json:"shared,omitempty"`
	Status                  *string             `json:"status,omitempty"`
	Subnets                 *[]string           `json:"subnets,omitempty"`
	Tags                    *[]string           `json:"tags,omitempty"`
	TenantId                *string             `json:"tenant_id,omitempty"`
	UpdatedAt               *time.Time          `json:"updated_at,omitempty"`
}

// NeutronSubnetResponse defines model for NeutronSubnetResponse.
type NeutronSubnetResponse struct {
	Network *NeutronSubnet `json:"network,omitempty"`
}

// NeutronSubnetsResponse defines model for NeutronSubnetsResponse.
type NeutronSubnetsResponse struct {
	Networks *[]NeutronSubnet `json:"networks,omitempty"`
}

// NeutronVersion defines model for NeutronVersion.
type NeutronVersion struct {
	Id     string               `json:"id"`
	Links  []NeutronVersionLink `json:"links"`
	Status string               `json:"status"`
}

// NeutronVersionLink defines model for NeutronVersionLink.
type NeutronVersionLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// NeutronVersionResponse defines model for NeutronVersionResponse.
type NeutronVersionResponse struct {
	Versions []NeutronVersion `json:"versions"`
}

// NovaFlavorDetail defines model for NovaFlavorDetail.
type NovaFlavorDetail struct {
	OSFLVDISABLEDDisabled *bool              `json:"OS-FLV-DISABLED:disabled,omitempty"`
	OSFLVEXTDATAEphemeral *int               `json:"OS-FLV-EXT-DATA:ephemeral,omitempty"`
	Description           *string            `json:"description"`
	Disk                  *int               `json:"disk,omitempty"`
	ExtraSpecs            *map[string]string `json:"extra_specs,omitempty"`
	Id                    *string            `json:"id,omitempty"`
	Links                 *[]struct {
		Href *string `json:"href,omitempty"`
		Rel  *string `json:"rel,omitempty"`
	} `json:"links,omitempty"`
	Name                   *string  `json:"name,omitempty"`
	OsFlavorAccessIsPublic *bool    `json:"os-flavor-access:is_public,omitempty"`
	Ram                    *int     `json:"ram,omitempty"`
	RxtxFactor             *float32 `json:"rxtx_factor,omitempty"`
	Swap                   *string  `json:"swap,omitempty"`
	Vcpus                  *int     `json:"vcpus,omitempty"`
}

// NovaFlavorResponse defines model for NovaFlavorResponse.
type NovaFlavorResponse struct {
	Flavor *NovaFlavorDetail `json:"flavor,omitempty"`
}

// NovaFlavorsDetailResponse defines model for NovaFlavorsDetailResponse.
type NovaFlavorsDetailResponse struct {
	Flavors *[]NovaFlavorDetail `json:"flavors,omitempty"`
}

// NovaServerResponse defines model for NovaServerResponse.
type NovaServerResponse struct {
	Server *struct {
		OSDCFDiskConfig *string             `json:"OS-DCF:diskConfig,omitempty"`
		AdminPass       *string             `json:"adminPass,omitempty"`
		Id              *openapi_types.UUID `json:"id,omitempty"`
		Links           *[]struct {
			Href *string `json:"href,omitempty"`
			Rel  *string `json:"rel,omitempty"`
		} `json:"links,omitempty"`
		SecurityGroups *[]struct {
			Name *string `json:"name,omitempty"`
		} `json:"security_groups,omitempty"`
	} `json:"server,omitempty"`
}

// NovaServersDetailResponse defines model for NovaServersDetailResponse.
type NovaServersDetailResponse struct {
	Servers *[]struct {
		OSDCFDiskConfig                *string    `json:"OS-DCF:diskConfig,omitempty"`
		OSEXTAZAvailabilityZone        *string    `json:"OS-EXT-AZ:availability_zone,omitempty"`
		OSEXTSRVATTRHost               *string    `json:"OS-EXT-SRV-ATTR:host"`
		OSEXTSRVATTRHostname           *string    `json:"OS-EXT-SRV-ATTR:hostname,omitempty"`
		OSEXTSRVATTRHypervisorHostname *string    `json:"OS-EXT-SRV-ATTR:hypervisor_hostname"`
		OSEXTSRVATTRInstanceName       *string    `json:"OS-EXT-SRV-ATTR:instance_name,omitempty"`
		OSEXTSRVATTRKernelId           *string    `json:"OS-EXT-SRV-ATTR:kernel_id,omitempty"`
		OSEXTSRVATTRLaunchIndex        *int       `json:"OS-EXT-SRV-ATTR:launch_index,omitempty"`
		OSEXTSRVATTRRamdiskId          *string    `json:"OS-EXT-SRV-ATTR:ramdisk_id,omitempty"`
		OSEXTSRVATTRReservationId      *string    `json:"OS-EXT-SRV-ATTR:reservation_id,omitempty"`
		OSEXTSRVATTRRootDeviceName     *string    `json:"OS-EXT-SRV-ATTR:root_device_name"`
		OSEXTSRVATTRUserData           *string    `json:"OS-EXT-SRV-ATTR:user_data"`
		OSEXTSTSPowerState             *int       `json:"OS-EXT-STS:power_state,omitempty"`
		OSEXTSTSTaskState              *string    `json:"OS-EXT-STS:task_state"`
		OSEXTSTSVmState                *string    `json:"OS-EXT-STS:vm_state,omitempty"`
		OSSRVUSGLaunchedAt             *time.Time `json:"OS-SRV-USG:launched_at"`
		OSSRVUSGTerminatedAt           *time.Time `json:"OS-SRV-USG:terminated_at"`
		AccessIPv4                     *string    `json:"accessIPv4,omitempty"`
		AccessIPv6                     *string    `json:"accessIPv6,omitempty"`
		Addresses                      *map[string][]struct {
			Addr *string `json:"addr,omitempty"`
			Type *string `json:"type,omitempty"`
		} `json:"addresses,omitempty"`
		ConfigDrive *string    `json:"config_drive,omitempty"`
		Created     *time.Time `json:"created,omitempty"`
		Description *string    `json:"description"`
		Flavor      *struct {
			Disk         *int               `json:"disk,omitempty"`
			Ephemeral    *int               `json:"ephemeral,omitempty"`
			ExtraSpecs   *map[string]string `json:"extra_specs,omitempty"`
			OriginalName *string            `json:"original_name,omitempty"`
			Ram          *int               `json:"ram,omitempty"`
			Swap         *int               `json:"swap,omitempty"`
			Vcpus        *int               `json:"vcpus,omitempty"`
		} `json:"flavor,omitempty"`
		HostId     *string             `json:"hostId,omitempty"`
		HostStatus *string             `json:"host_status,omitempty"`
		Id         *openapi_types.UUID `json:"id,omitempty"`
		Image      *struct {
			Id    *string `json:"id,omitempty"`
			Links *[]struct {
				Href *string `json:"href,omitempty"`
				Rel  *string `json:"rel,omitempty"`
			} `json:"links,omitempty"`
		} `json:"image,omitempty"`
		KeyName *string `json:"key_name"`
		Links   *[]struct {
			Href *string `json:"href,omitempty"`
			Rel  *string `json:"rel,omitempty"`
		} `json:"links,omitempty"`
		Locked                           *bool                     `json:"locked,omitempty"`
		LockedReason                     *string                   `json:"locked_reason"`
		Metadata                         *map[string]string        `json:"metadata,omitempty"`
		Name                             *string                   `json:"name,omitempty"`
		OsExtendedVolumesVolumesAttached *[]map[string]interface{} `json:"os-extended-volumes:volumes_attached,omitempty"`
		PinnedAvailabilityZone           *string                   `json:"pinned_availability_zone"`
		Status                           *string                   `json:"status,omitempty"`
		Tags                             *[]string                 `json:"tags,omitempty"`
		TenantId                         *string                   `json:"tenant_id,omitempty"`
		TrustedImageCertificates         *[]string                 `json:"trusted_image_certificates"`
		Updated                          *time.Time                `json:"updated,omitempty"`
		UserId                           *string                   `json:"user_id,omitempty"`
	} `json:"servers,omitempty"`
}

// NovaVersion defines model for NovaVersion.
type NovaVersion struct {
	Id         string            `json:"id"`
	Links      []NovaVersionLink `json:"links"`
	MinVersion string            `json:"min_version"`
	Status     string            `json:"status"`
	Updated    string            `json:"updated"`
	Version    string            `json:"version"`
}

// NovaVersionLink defines model for NovaVersionLink.
type NovaVersionLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// NovaVersionResponse defines model for NovaVersionResponse.
type NovaVersionResponse struct {
	Version NovaVersion `json:"version"`
}

// PlacementVersion defines model for PlacementVersion.
type PlacementVersion struct {
	Id         string                 `json:"id"`
	Links      []PlacementVersionLink `json:"links"`
	MaxVersion string                 `json:"max_version"`
	MinVersion string                 `json:"min_version"`
	Status     string                 `json:"status"`
}

// PlacementVersionLink defines model for PlacementVersionLink.
type PlacementVersionLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// PlacementVersionResponse defines model for PlacementVersionResponse.
type PlacementVersionResponse struct {
	Versions []PlacementVersion `json:"versions"`
}

// N4XX defines model for 4XX.
type N4XX = Error

// Default defines model for default.
type Default = Error

// GetNeutronAgentsParams defines parameters for GetNeutronAgents.
type GetNeutronAgentsParams struct {
	// TenantId ID of glance image to fetch
	TenantId *string `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// Fields Fields to be returned
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetNeutronPortsParams defines parameters for GetNeutronPorts.
type GetNeutronPortsParams struct {
	// TenantId ID of glance image to fetch
	TenantId *string `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// Fields Fields to be returned
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetNovaServersDetailParams defines parameters for GetNovaServersDetail.
type GetNovaServersDetailParams struct {
	// Flavor Filter by flavor ID or name.
	Flavor *string `form:"flavor,omitempty" json:"flavor,omitempty"`

	// Image Filter by image ID or name.
	Image *string `form:"image,omitempty" json:"image,omitempty"`

	// Name Filter by server name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// ProjectId Filter by project ID.
	ProjectId *string `form:"project_id,omitempty" json:"project_id,omitempty"`

	// ReservationId Filter by reservation ID.
	ReservationId *string `form:"reservation_id,omitempty" json:"reservation_id,omitempty"`

	// Status Filter by server status (e.g., ACTIVE, SHUTOFF).
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// UserId Filter by user ID.
	UserId *string `form:"user_id,omitempty" json:"user_id,omitempty"`

	// Deleted Filter by deleted status. Use `false` to exclude deleted servers.
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`

	// Host Filter by host.
	Host *string `form:"host,omitempty" json:"host,omitempty"`

	// Ip Filter by IPv4 address.
	Ip *string `form:"ip,omitempty" json:"ip,omitempty"`

	// Ip6 Filter by IPv6 address.
	Ip6 *string `form:"ip6,omitempty" json:"ip6,omitempty"`

	// ChangesSince Filter by changes since the specified time (ISO 8601 format).
	ChangesSince *time.Time `form:"changes-since,omitempty" json:"changes-since,omitempty"`

	// ChangesBefore Filter by changes before the specified time (ISO 8601 format).
	ChangesBefore *time.Time `form:"changes-before,omitempty" json:"changes-before,omitempty"`
}

// GetPlacementResourceProvidersParams defines parameters for GetPlacementResourceProviders.
type GetPlacementResourceProvidersParams struct {
	// InTree ID of glance image to fetch
	InTree *string `form:"in_tree,omitempty" json:"in_tree,omitempty"`
}

// CreateNovaServerJSONRequestBody defines body for CreateNovaServer for application/json ContentType.
type CreateNovaServerJSONRequestBody = CreateServerRequest

// ActionNovaServerJSONRequestBody defines body for ActionNovaServer for application/json ContentType.
type ActionNovaServerJSONRequestBody = ActionServerRequest

// UpdatePlacementAllocationByIDJSONRequestBody defines body for UpdatePlacementAllocationByID for application/json ContentType.
type UpdatePlacementAllocationByIDJSONRequestBody = CreateServerRequest

var file string
var controller IController

type IController interface {
	GetBaseURL() string
	RequestEditorFn(ctx context.Context, req *http.Request) error
}

var GetNeutronAgentsTenantId string
var GetNeutronAgentsFields []string

var GetNeutronPortsTenantId string
var GetNeutronPortsFields []string

var GetNovaServersDetailFlavor string
var GetNovaServersDetailImage string
var GetNovaServersDetailName string
var GetNovaServersDetailProjectId string
var GetNovaServersDetailReservationId string
var GetNovaServersDetailStatus string
var GetNovaServersDetailUserId string
var GetNovaServersDetailDeleted bool
var GetNovaServersDetailHost string
var GetNovaServersDetailIp string
var GetNovaServersDetailIp6 string
var GetNovaServersDetailChangesSince time.Time
var GetNovaServersDetailChangesBefore time.Time

var GetPlacementResourceProvidersInTree string

func init() {
	controller = NewController()

	RootCmd.AddCommand(GetGlanceVersion)

	RootCmd.AddCommand(GetGlanceImages)

	RootCmd.AddCommand(CreateGlanceImage)

	RootCmd.AddCommand(DeleteGlanceImageByID)

	RootCmd.AddCommand(GetGlanceImageByID)

	RootCmd.AddCommand(GetGlanceImageFileByID)

	RootCmd.AddCommand(UploadGlanceImageFile)

	RootCmd.AddCommand(GetGlanceSchemasImage)

	RootCmd.AddCommand(GetNeutronVersion)

	GetNeutronAgents.PersistentFlags().StringVarP(&GetNeutronAgentsTenantId, "tenantid", "", "", "ID of glance image to fetch")

	GetNeutronAgents.PersistentFlags().StringSliceVarP(&GetNeutronAgentsFields, "fields", "", nil, "Fields to be returned")

	RootCmd.AddCommand(GetNeutronAgents)

	RootCmd.AddCommand(GetNeutronExtensions)

	RootCmd.AddCommand(GetNeutronNetworks)

	RootCmd.AddCommand(CreateNeutronNetwork)

	RootCmd.AddCommand(DeleteNeutronNetworkByID)

	RootCmd.AddCommand(GetNeutronNetworkByID)

	GetNeutronPorts.PersistentFlags().StringVarP(&GetNeutronPortsTenantId, "tenantid", "", "", "ID of glance image to fetch")

	GetNeutronPorts.PersistentFlags().StringSliceVarP(&GetNeutronPortsFields, "fields", "", nil, "Fields to be returned")

	RootCmd.AddCommand(GetNeutronPorts)

	RootCmd.AddCommand(CreateNeutronPort)

	RootCmd.AddCommand(DeleteNeutronPortByID)

	RootCmd.AddCommand(GetNeutronPortByID)

	RootCmd.AddCommand(UpdateNeutronPortByID)

	RootCmd.AddCommand(GetNeutronQuotasByProjectID)

	RootCmd.AddCommand(GetNeutronSecurityGroups)

	RootCmd.AddCommand(GetNeutronSubnets)

	RootCmd.AddCommand(CreateNeutronSubnet)

	RootCmd.AddCommand(DeleteNeutronSubnetByID)

	RootCmd.AddCommand(GetNeutronSubnetByID)

	RootCmd.AddCommand(GetNovaVersion)

	RootCmd.AddCommand(CreateNovaFlavor)

	RootCmd.AddCommand(GetNovaFlavorsDetail)

	RootCmd.AddCommand(GetNovaFlavorByID)

	RootCmd.AddCommand(CreateNovaExternalEvents)

	RootCmd.AddCommand(GetNovaServices)

	CreateNovaServer.PersistentFlags().StringVarP(&file, "file", "f", "", "file path")
	CreateNovaServer.MarkPersistentFlagRequired("file")

	RootCmd.AddCommand(CreateNovaServer)

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailFlavor, "flavor", "", "", "Filter by flavor ID or name.")

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailImage, "image", "", "", "Filter by image ID or name.")

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailName, "name", "", "", "Filter by server name.")

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailProjectId, "projectid", "", "", "Filter by project ID.")

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailReservationId, "reservationid", "", "", "Filter by reservation ID.")

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailStatus, "status", "", "", "Filter by server status (e.g., ACTIVE, SHUTOFF).")

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailUserId, "userid", "", "", "Filter by user ID.")

	// Unspported Type bool

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailHost, "host", "", "", "Filter by host.")

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailIp, "ip", "", "", "Filter by IPv4 address.")

	GetNovaServersDetail.PersistentFlags().StringVarP(&GetNovaServersDetailIp6, "ip6", "", "", "Filter by IPv6 address.")

	// Unspported Type time.Time

	// Unspported Type time.Time

	RootCmd.AddCommand(GetNovaServersDetail)

	RootCmd.AddCommand(DeleteNovaServerByID)

	RootCmd.AddCommand(GetNovaServerByID)

	ActionNovaServer.PersistentFlags().StringVarP(&file, "file", "f", "", "file path")
	ActionNovaServer.MarkPersistentFlagRequired("file")

	RootCmd.AddCommand(ActionNovaServer)

	RootCmd.AddCommand(GetPlacementVersion)

	RootCmd.AddCommand(GetPlacementVersion2)

	RootCmd.AddCommand(GetPlacementAllocationCandidates)

	RootCmd.AddCommand(DeletePlacementAllocationByID)

	RootCmd.AddCommand(GetPlacementAllocationByID)

	UpdatePlacementAllocationByID.PersistentFlags().StringVarP(&file, "file", "f", "", "file path")
	UpdatePlacementAllocationByID.MarkPersistentFlagRequired("file")

	RootCmd.AddCommand(UpdatePlacementAllocationByID)

	GetPlacementResourceProviders.PersistentFlags().StringVarP(&GetPlacementResourceProvidersInTree, "intree", "", "", "ID of glance image to fetch")

	RootCmd.AddCommand(GetPlacementResourceProviders)

	RootCmd.AddCommand(CreatePlacementResourceProvider)

	RootCmd.AddCommand(GetPlacementResourceProviderAggregates)

	RootCmd.AddCommand(GetPlacementResourceProviderAllocations)

	RootCmd.AddCommand(GetPlacementResourceProviderInventories)

	RootCmd.AddCommand(UpdatePlacementResourceProviderInventory)

	RootCmd.AddCommand(GetPlacementResourceProviderTraits)

	RootCmd.AddCommand(UpdatePlacementResourceProviderTraits)

	RootCmd.AddCommand(GetPlacementTraits)

}

var GetGlanceVersion = &cobra.Command{
	Use:   "GetGlanceVersion",
	Short: "GetGlanceVersion",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetGlanceVersion(ctx)

		fmt.Println(res, err)
	},
}
var GetGlanceImages = &cobra.Command{
	Use:   "GetGlanceImages",
	Short: "GetGlanceImages",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetGlanceImages(ctx)

		fmt.Println(res, err)
	},
}
var CreateGlanceImage = &cobra.Command{
	Use:   "CreateGlanceImage",
	Short: "CreateGlanceImage",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.CreateGlanceImage(ctx)

		fmt.Println(res, err)
	},
}
var DeleteGlanceImageByID = &cobra.Command{
	Use:   "DeleteGlanceImageByID <id>",
	Short: "DeleteGlanceImageByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.DeleteGlanceImageByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetGlanceImageByID = &cobra.Command{
	Use:   "GetGlanceImageByID <id>",
	Short: "GetGlanceImageByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetGlanceImageByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetGlanceImageFileByID = &cobra.Command{
	Use:   "GetGlanceImageFileByID <id>",
	Short: "GetGlanceImageFileByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetGlanceImageFileByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var UploadGlanceImageFile = &cobra.Command{
	Use:   "UploadGlanceImageFile <id>",
	Short: "UploadGlanceImageFile",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.UploadGlanceImageFile(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetGlanceSchemasImage = &cobra.Command{
	Use:   "GetGlanceSchemasImage",
	Short: "GetGlanceSchemasImage",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetGlanceSchemasImage(ctx)

		fmt.Println(res, err)
	},
}
var GetNeutronVersion = &cobra.Command{
	Use:   "GetNeutronVersion",
	Short: "GetNeutronVersion",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronVersion(ctx)

		fmt.Println(res, err)
	},
}
var GetNeutronAgents = &cobra.Command{
	Use:   "GetNeutronAgents",
	Short: "GetNeutronAgents",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		params := &GetNeutronAgentsParams{}

		if GetNeutronAgentsTenantId != "" {
			params.TenantId = &GetNeutronAgentsTenantId
		}

		res, err := client.GetNeutronAgents(ctx, params)

		fmt.Println(res, err)
	},
}
var GetNeutronExtensions = &cobra.Command{
	Use:   "GetNeutronExtensions",
	Short: "GetNeutronExtensions",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronExtensions(ctx)

		fmt.Println(res, err)
	},
}
var GetNeutronNetworks = &cobra.Command{
	Use:   "GetNeutronNetworks",
	Short: "GetNeutronNetworks",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronNetworks(ctx)

		fmt.Println(res, err)
	},
}
var CreateNeutronNetwork = &cobra.Command{
	Use:   "CreateNeutronNetwork",
	Short: "CreateNeutronNetwork",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.CreateNeutronNetwork(ctx)

		fmt.Println(res, err)
	},
}
var DeleteNeutronNetworkByID = &cobra.Command{
	Use:   "DeleteNeutronNetworkByID <id>",
	Short: "DeleteNeutronNetworkByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.DeleteNeutronNetworkByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetNeutronNetworkByID = &cobra.Command{
	Use:   "GetNeutronNetworkByID <id>",
	Short: "GetNeutronNetworkByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronNetworkByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetNeutronPorts = &cobra.Command{
	Use:   "GetNeutronPorts",
	Short: "GetNeutronPorts",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		params := &GetNeutronPortsParams{}

		if GetNeutronPortsTenantId != "" {
			params.TenantId = &GetNeutronPortsTenantId
		}

		res, err := client.GetNeutronPorts(ctx, params)

		fmt.Println(res, err)
	},
}
var CreateNeutronPort = &cobra.Command{
	Use:   "CreateNeutronPort",
	Short: "CreateNeutronPort",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.CreateNeutronPort(ctx)

		fmt.Println(res, err)
	},
}
var DeleteNeutronPortByID = &cobra.Command{
	Use:   "DeleteNeutronPortByID <id>",
	Short: "DeleteNeutronPortByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.DeleteNeutronPortByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetNeutronPortByID = &cobra.Command{
	Use:   "GetNeutronPortByID <id>",
	Short: "GetNeutronPortByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronPortByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var UpdateNeutronPortByID = &cobra.Command{
	Use:   "UpdateNeutronPortByID <id>",
	Short: "UpdateNeutronPortByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.UpdateNeutronPortByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetNeutronQuotasByProjectID = &cobra.Command{
	Use:   "GetNeutronQuotasByProjectID <projectId>",
	Short: "GetNeutronQuotasByProjectID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronQuotasByProjectID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetNeutronSecurityGroups = &cobra.Command{
	Use:   "GetNeutronSecurityGroups",
	Short: "GetNeutronSecurityGroups",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronSecurityGroups(ctx)

		fmt.Println(res, err)
	},
}
var GetNeutronSubnets = &cobra.Command{
	Use:   "GetNeutronSubnets",
	Short: "GetNeutronSubnets",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronSubnets(ctx)

		fmt.Println(res, err)
	},
}
var CreateNeutronSubnet = &cobra.Command{
	Use:   "CreateNeutronSubnet",
	Short: "CreateNeutronSubnet",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.CreateNeutronSubnet(ctx)

		fmt.Println(res, err)
	},
}
var DeleteNeutronSubnetByID = &cobra.Command{
	Use:   "DeleteNeutronSubnetByID <id>",
	Short: "DeleteNeutronSubnetByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.DeleteNeutronSubnetByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetNeutronSubnetByID = &cobra.Command{
	Use:   "GetNeutronSubnetByID <id>",
	Short: "GetNeutronSubnetByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNeutronSubnetByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetNovaVersion = &cobra.Command{
	Use:   "GetNovaVersion",
	Short: "GetNovaVersion",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNovaVersion(ctx)

		fmt.Println(res, err)
	},
}
var CreateNovaFlavor = &cobra.Command{
	Use:   "CreateNovaFlavor",
	Short: "CreateNovaFlavor",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.CreateNovaFlavor(ctx)

		fmt.Println(res, err)
	},
}
var GetNovaFlavorsDetail = &cobra.Command{
	Use:   "GetNovaFlavorsDetail",
	Short: "GetNovaFlavorsDetail",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNovaFlavorsDetail(ctx)

		fmt.Println(res, err)
	},
}
var GetNovaFlavorByID = &cobra.Command{
	Use:   "GetNovaFlavorByID <id>",
	Short: "GetNovaFlavorByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNovaFlavorByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var CreateNovaExternalEvents = &cobra.Command{
	Use:   "CreateNovaExternalEvents",
	Short: "CreateNovaExternalEvents",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.CreateNovaExternalEvents(ctx)

		fmt.Println(res, err)
	},
}
var GetNovaServices = &cobra.Command{
	Use:   "GetNovaServices",
	Short: "GetNovaServices",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNovaServices(ctx)

		fmt.Println(res, err)
	},
}
var CreateNovaServer = &cobra.Command{
	Use:   "CreateNovaServer",
	Short: "CreateNovaServer",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		bytes, err := os.ReadFile(file)
		if err != nil {
			fmt.Println(err)
		}

		body := CreateNovaServerJSONRequestBody{}
		err = json.Unmarshal(bytes, &body)
		if err != nil {
			fmt.Println(err)
		}

		res, err := client.CreateNovaServer(ctx, body)

		fmt.Println(res, err)
	},
}
var GetNovaServersDetail = &cobra.Command{
	Use:   "GetNovaServersDetail",
	Short: "GetNovaServersDetail",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		params := &GetNovaServersDetailParams{}

		if GetNovaServersDetailFlavor != "" {
			params.Flavor = &GetNovaServersDetailFlavor
		}

		if GetNovaServersDetailImage != "" {
			params.Image = &GetNovaServersDetailImage
		}

		if GetNovaServersDetailName != "" {
			params.Name = &GetNovaServersDetailName
		}

		if GetNovaServersDetailProjectId != "" {
			params.ProjectId = &GetNovaServersDetailProjectId
		}

		if GetNovaServersDetailReservationId != "" {
			params.ReservationId = &GetNovaServersDetailReservationId
		}

		if GetNovaServersDetailStatus != "" {
			params.Status = &GetNovaServersDetailStatus
		}

		if GetNovaServersDetailUserId != "" {
			params.UserId = &GetNovaServersDetailUserId
		}

		if GetNovaServersDetailHost != "" {
			params.Host = &GetNovaServersDetailHost
		}

		if GetNovaServersDetailIp != "" {
			params.Ip = &GetNovaServersDetailIp
		}

		if GetNovaServersDetailIp6 != "" {
			params.Ip6 = &GetNovaServersDetailIp6
		}

		res, err := client.GetNovaServersDetail(ctx, params)

		fmt.Println(res, err)
	},
}
var DeleteNovaServerByID = &cobra.Command{
	Use:   "DeleteNovaServerByID <id>",
	Short: "DeleteNovaServerByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.DeleteNovaServerByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetNovaServerByID = &cobra.Command{
	Use:   "GetNovaServerByID <id>",
	Short: "GetNovaServerByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetNovaServerByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var ActionNovaServer = &cobra.Command{
	Use:   "ActionNovaServer <id>",
	Short: "ActionNovaServer",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		bytes, err := os.ReadFile(file)
		if err != nil {
			fmt.Println(err)
		}

		body := ActionNovaServerJSONRequestBody{}
		err = json.Unmarshal(bytes, &body)
		if err != nil {
			fmt.Println(err)
		}

		res, err := client.ActionNovaServer(ctx, args[0], body)

		fmt.Println(res, err)
	},
}
var GetPlacementVersion = &cobra.Command{
	Use:   "GetPlacementVersion",
	Short: "GetPlacementVersion",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementVersion(ctx)

		fmt.Println(res, err)
	},
}
var GetPlacementVersion2 = &cobra.Command{
	Use:   "GetPlacementVersion2",
	Short: "GetPlacementVersion2",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementVersion2(ctx)

		fmt.Println(res, err)
	},
}
var GetPlacementAllocationCandidates = &cobra.Command{
	Use:   "GetPlacementAllocationCandidates",
	Short: "GetPlacementAllocationCandidates",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementAllocationCandidates(ctx)

		fmt.Println(res, err)
	},
}
var DeletePlacementAllocationByID = &cobra.Command{
	Use:   "DeletePlacementAllocationByID <id>",
	Short: "DeletePlacementAllocationByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.DeletePlacementAllocationByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetPlacementAllocationByID = &cobra.Command{
	Use:   "GetPlacementAllocationByID <id>",
	Short: "GetPlacementAllocationByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementAllocationByID(ctx, args[0])

		fmt.Println(res, err)
	},
}
var UpdatePlacementAllocationByID = &cobra.Command{
	Use:   "UpdatePlacementAllocationByID <id>",
	Short: "UpdatePlacementAllocationByID",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		bytes, err := os.ReadFile(file)
		if err != nil {
			fmt.Println(err)
		}

		body := UpdatePlacementAllocationByIDJSONRequestBody{}
		err = json.Unmarshal(bytes, &body)
		if err != nil {
			fmt.Println(err)
		}

		res, err := client.UpdatePlacementAllocationByID(ctx, args[0], body)

		fmt.Println(res, err)
	},
}
var GetPlacementResourceProviders = &cobra.Command{
	Use:   "GetPlacementResourceProviders",
	Short: "GetPlacementResourceProviders",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		params := &GetPlacementResourceProvidersParams{}

		if GetPlacementResourceProvidersInTree != "" {
			params.InTree = &GetPlacementResourceProvidersInTree
		}

		res, err := client.GetPlacementResourceProviders(ctx, params)

		fmt.Println(res, err)
	},
}
var CreatePlacementResourceProvider = &cobra.Command{
	Use:   "CreatePlacementResourceProvider",
	Short: "CreatePlacementResourceProvider",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.CreatePlacementResourceProvider(ctx)

		fmt.Println(res, err)
	},
}
var GetPlacementResourceProviderAggregates = &cobra.Command{
	Use:   "GetPlacementResourceProviderAggregates <id>",
	Short: "GetPlacementResourceProviderAggregates",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementResourceProviderAggregates(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetPlacementResourceProviderAllocations = &cobra.Command{
	Use:   "GetPlacementResourceProviderAllocations <id>",
	Short: "GetPlacementResourceProviderAllocations",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementResourceProviderAllocations(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetPlacementResourceProviderInventories = &cobra.Command{
	Use:   "GetPlacementResourceProviderInventories <id>",
	Short: "GetPlacementResourceProviderInventories",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementResourceProviderInventories(ctx, args[0])

		fmt.Println(res, err)
	},
}
var UpdatePlacementResourceProviderInventory = &cobra.Command{
	Use:   "UpdatePlacementResourceProviderInventory <id>",
	Short: "UpdatePlacementResourceProviderInventory",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.UpdatePlacementResourceProviderInventory(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetPlacementResourceProviderTraits = &cobra.Command{
	Use:   "GetPlacementResourceProviderTraits <id>",
	Short: "GetPlacementResourceProviderTraits",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementResourceProviderTraits(ctx, args[0])

		fmt.Println(res, err)
	},
}
var UpdatePlacementResourceProviderTraits = &cobra.Command{
	Use:   "UpdatePlacementResourceProviderTraits <id>",
	Short: "UpdatePlacementResourceProviderTraits",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.UpdatePlacementResourceProviderTraits(ctx, args[0])

		fmt.Println(res, err)
	},
}
var GetPlacementTraits = &cobra.Command{
	Use:   "GetPlacementTraits",
	Short: "GetPlacementTraits",
	Args:  cobra.ExactArgs(0),
	Run: func(cmd *cobra.Command, args []string) {
		client, err := NewClientWithResponses(
			controller.GetBaseURL(),
			WithRequestEditorFn(controller.RequestEditorFn),
		)

		if err != nil {
			fmt.Println(err)
		}

		ctx := context.Background()

		res, err := client.GetPlacementTraits(ctx)

		fmt.Println(res, err)
	},
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGlanceVersion request
	GetGlanceVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlanceImages request
	GetGlanceImages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGlanceImage request
	CreateGlanceImage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGlanceImageByID request
	DeleteGlanceImageByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlanceImageByID request
	GetGlanceImageByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlanceImageFileByID request
	GetGlanceImageFileByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadGlanceImageFile request
	UploadGlanceImageFile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlanceSchemasImage request
	GetGlanceSchemasImage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronVersion request
	GetNeutronVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronAgents request
	GetNeutronAgents(ctx context.Context, params *GetNeutronAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronExtensions request
	GetNeutronExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronNetworks request
	GetNeutronNetworks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNeutronNetwork request
	CreateNeutronNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNeutronNetworkByID request
	DeleteNeutronNetworkByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronNetworkByID request
	GetNeutronNetworkByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronPorts request
	GetNeutronPorts(ctx context.Context, params *GetNeutronPortsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNeutronPort request
	CreateNeutronPort(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNeutronPortByID request
	DeleteNeutronPortByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronPortByID request
	GetNeutronPortByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNeutronPortByID request
	UpdateNeutronPortByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronQuotasByProjectID request
	GetNeutronQuotasByProjectID(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronSecurityGroups request
	GetNeutronSecurityGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronSubnets request
	GetNeutronSubnets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNeutronSubnet request
	CreateNeutronSubnet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNeutronSubnetByID request
	DeleteNeutronSubnetByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNeutronSubnetByID request
	GetNeutronSubnetByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNovaVersion request
	GetNovaVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNovaFlavor request
	CreateNovaFlavor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNovaFlavorsDetail request
	GetNovaFlavorsDetail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNovaFlavorByID request
	GetNovaFlavorByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNovaExternalEvents request
	CreateNovaExternalEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNovaServices request
	GetNovaServices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNovaServerWithBody request with any body
	CreateNovaServerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNovaServer(ctx context.Context, body CreateNovaServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNovaServersDetail request
	GetNovaServersDetail(ctx context.Context, params *GetNovaServersDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNovaServerByID request
	DeleteNovaServerByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNovaServerByID request
	GetNovaServerByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionNovaServerWithBody request with any body
	ActionNovaServerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionNovaServer(ctx context.Context, id string, body ActionNovaServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementVersion request
	GetPlacementVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementVersion2 request
	GetPlacementVersion2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementAllocationCandidates request
	GetPlacementAllocationCandidates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlacementAllocationByID request
	DeletePlacementAllocationByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementAllocationByID request
	GetPlacementAllocationByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlacementAllocationByIDWithBody request with any body
	UpdatePlacementAllocationByIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlacementAllocationByID(ctx context.Context, id string, body UpdatePlacementAllocationByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementResourceProviders request
	GetPlacementResourceProviders(ctx context.Context, params *GetPlacementResourceProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlacementResourceProvider request
	CreatePlacementResourceProvider(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementResourceProviderAggregates request
	GetPlacementResourceProviderAggregates(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementResourceProviderAllocations request
	GetPlacementResourceProviderAllocations(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementResourceProviderInventories request
	GetPlacementResourceProviderInventories(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlacementResourceProviderInventory request
	UpdatePlacementResourceProviderInventory(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementResourceProviderTraits request
	GetPlacementResourceProviderTraits(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlacementResourceProviderTraits request
	UpdatePlacementResourceProviderTraits(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacementTraits request
	GetPlacementTraits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetGlanceVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlanceVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlanceImages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlanceImagesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGlanceImage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGlanceImageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGlanceImageByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGlanceImageByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlanceImageByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlanceImageByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlanceImageFileByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlanceImageFileByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadGlanceImageFile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadGlanceImageFileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlanceSchemasImage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlanceSchemasImageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronAgents(ctx context.Context, params *GetNeutronAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronExtensionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronNetworks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronNetworksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNeutronNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNeutronNetworkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNeutronNetworkByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNeutronNetworkByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronNetworkByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronNetworkByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronPorts(ctx context.Context, params *GetNeutronPortsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronPortsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNeutronPort(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNeutronPortRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNeutronPortByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNeutronPortByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronPortByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronPortByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNeutronPortByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNeutronPortByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronQuotasByProjectID(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronQuotasByProjectIDRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronSecurityGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronSecurityGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronSubnets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronSubnetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNeutronSubnet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNeutronSubnetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNeutronSubnetByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNeutronSubnetByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNeutronSubnetByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNeutronSubnetByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNovaVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNovaVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNovaFlavor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNovaFlavorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNovaFlavorsDetail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNovaFlavorsDetailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNovaFlavorByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNovaFlavorByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNovaExternalEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNovaExternalEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNovaServices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNovaServicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNovaServerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNovaServerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNovaServer(ctx context.Context, body CreateNovaServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNovaServerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNovaServersDetail(ctx context.Context, params *GetNovaServersDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNovaServersDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNovaServerByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNovaServerByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNovaServerByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNovaServerByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionNovaServerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionNovaServerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionNovaServer(ctx context.Context, id string, body ActionNovaServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionNovaServerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementVersion2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementVersion2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementAllocationCandidates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementAllocationCandidatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlacementAllocationByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlacementAllocationByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementAllocationByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementAllocationByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementAllocationByIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementAllocationByIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementAllocationByID(ctx context.Context, id string, body UpdatePlacementAllocationByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementAllocationByIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementResourceProviders(ctx context.Context, params *GetPlacementResourceProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementResourceProvidersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlacementResourceProvider(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlacementResourceProviderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementResourceProviderAggregates(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementResourceProviderAggregatesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementResourceProviderAllocations(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementResourceProviderAllocationsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementResourceProviderInventories(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementResourceProviderInventoriesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementResourceProviderInventory(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementResourceProviderInventoryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementResourceProviderTraits(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementResourceProviderTraitsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlacementResourceProviderTraits(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlacementResourceProviderTraitsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacementTraits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementTraitsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGlanceVersionRequest generates requests for GetGlanceVersion
func NewGetGlanceVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/glance/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGlanceImagesRequest generates requests for GetGlanceImages
func NewGetGlanceImagesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/glance/v2/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGlanceImageRequest generates requests for CreateGlanceImage
func NewCreateGlanceImageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/glance/v2/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGlanceImageByIDRequest generates requests for DeleteGlanceImageByID
func NewDeleteGlanceImageByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/glance/v2/images/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGlanceImageByIDRequest generates requests for GetGlanceImageByID
func NewGetGlanceImageByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/glance/v2/images/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGlanceImageFileByIDRequest generates requests for GetGlanceImageFileByID
func NewGetGlanceImageFileByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/glance/v2/images/%s/file", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadGlanceImageFileRequest generates requests for UploadGlanceImageFile
func NewUploadGlanceImageFileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/glance/v2/images/%s/file", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGlanceSchemasImageRequest generates requests for GetGlanceSchemasImage
func NewGetGlanceSchemasImageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/glance/v2/schemas/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronVersionRequest generates requests for GetNeutronVersion
func NewGetNeutronVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronAgentsRequest generates requests for GetNeutronAgents
func NewGetNeutronAgentsRequest(server string, params *GetNeutronAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronExtensionsRequest generates requests for GetNeutronExtensions
func NewGetNeutronExtensionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronNetworksRequest generates requests for GetNeutronNetworks
func NewGetNeutronNetworksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/networks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNeutronNetworkRequest generates requests for CreateNeutronNetwork
func NewCreateNeutronNetworkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/networks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNeutronNetworkByIDRequest generates requests for DeleteNeutronNetworkByID
func NewDeleteNeutronNetworkByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/networks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronNetworkByIDRequest generates requests for GetNeutronNetworkByID
func NewGetNeutronNetworkByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/networks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronPortsRequest generates requests for GetNeutronPorts
func NewGetNeutronPortsRequest(server string, params *GetNeutronPortsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/ports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNeutronPortRequest generates requests for CreateNeutronPort
func NewCreateNeutronPortRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/ports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNeutronPortByIDRequest generates requests for DeleteNeutronPortByID
func NewDeleteNeutronPortByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/ports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronPortByIDRequest generates requests for GetNeutronPortByID
func NewGetNeutronPortByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/ports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNeutronPortByIDRequest generates requests for UpdateNeutronPortByID
func NewUpdateNeutronPortByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/ports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronQuotasByProjectIDRequest generates requests for GetNeutronQuotasByProjectID
func NewGetNeutronQuotasByProjectIDRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/quotas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronSecurityGroupsRequest generates requests for GetNeutronSecurityGroups
func NewGetNeutronSecurityGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/security-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronSubnetsRequest generates requests for GetNeutronSubnets
func NewGetNeutronSubnetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/subnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNeutronSubnetRequest generates requests for CreateNeutronSubnet
func NewCreateNeutronSubnetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/subnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNeutronSubnetByIDRequest generates requests for DeleteNeutronSubnetByID
func NewDeleteNeutronSubnetByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/subnets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNeutronSubnetByIDRequest generates requests for GetNeutronSubnetByID
func NewGetNeutronSubnetByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/neutron/v2.0/subnets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNovaVersionRequest generates requests for GetNovaVersion
func NewGetNovaVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNovaFlavorRequest generates requests for CreateNovaFlavor
func NewCreateNovaFlavorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/flavors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNovaFlavorsDetailRequest generates requests for GetNovaFlavorsDetail
func NewGetNovaFlavorsDetailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/flavors/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNovaFlavorByIDRequest generates requests for GetNovaFlavorByID
func NewGetNovaFlavorByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/flavors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNovaExternalEventsRequest generates requests for CreateNovaExternalEvents
func NewCreateNovaExternalEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/os-server-external-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNovaServicesRequest generates requests for GetNovaServices
func NewGetNovaServicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/os-services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNovaServerRequest calls the generic CreateNovaServer builder with application/json body
func NewCreateNovaServerRequest(server string, body CreateNovaServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNovaServerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNovaServerRequestWithBody generates requests for CreateNovaServer with any type of body
func NewCreateNovaServerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/servers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNovaServersDetailRequest generates requests for GetNovaServersDetail
func NewGetNovaServersDetailRequest(server string, params *GetNovaServersDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/servers/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Flavor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flavor", runtime.ParamLocationQuery, *params.Flavor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Image != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image", runtime.ParamLocationQuery, *params.Image); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted", runtime.ParamLocationQuery, *params.Deleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Host != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, *params.Host); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ip6 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip6", runtime.ParamLocationQuery, *params.Ip6); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChangesSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "changes-since", runtime.ParamLocationQuery, *params.ChangesSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChangesBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "changes-before", runtime.ParamLocationQuery, *params.ChangesBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNovaServerByIDRequest generates requests for DeleteNovaServerByID
func NewDeleteNovaServerByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/servers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNovaServerByIDRequest generates requests for GetNovaServerByID
func NewGetNovaServerByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/servers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionNovaServerRequest calls the generic ActionNovaServer builder with application/json body
func NewActionNovaServerRequest(server string, id string, body ActionNovaServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionNovaServerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewActionNovaServerRequestWithBody generates requests for ActionNovaServer with any type of body
func NewActionNovaServerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nova/v2.1/servers/%s/action", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlacementVersionRequest generates requests for GetPlacementVersion
func NewGetPlacementVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementVersion2Request generates requests for GetPlacementVersion2
func NewGetPlacementVersion2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementAllocationCandidatesRequest generates requests for GetPlacementAllocationCandidates
func NewGetPlacementAllocationCandidatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/allocation_candidates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePlacementAllocationByIDRequest generates requests for DeletePlacementAllocationByID
func NewDeletePlacementAllocationByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/allocations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementAllocationByIDRequest generates requests for GetPlacementAllocationByID
func NewGetPlacementAllocationByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/allocations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlacementAllocationByIDRequest calls the generic UpdatePlacementAllocationByID builder with application/json body
func NewUpdatePlacementAllocationByIDRequest(server string, id string, body UpdatePlacementAllocationByIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlacementAllocationByIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePlacementAllocationByIDRequestWithBody generates requests for UpdatePlacementAllocationByID with any type of body
func NewUpdatePlacementAllocationByIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/allocations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlacementResourceProvidersRequest generates requests for GetPlacementResourceProviders
func NewGetPlacementResourceProvidersRequest(server string, params *GetPlacementResourceProvidersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/resource_providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InTree != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "in_tree", runtime.ParamLocationQuery, *params.InTree); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlacementResourceProviderRequest generates requests for CreatePlacementResourceProvider
func NewCreatePlacementResourceProviderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/resource_providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementResourceProviderAggregatesRequest generates requests for GetPlacementResourceProviderAggregates
func NewGetPlacementResourceProviderAggregatesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/resource_providers/%s/aggregates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementResourceProviderAllocationsRequest generates requests for GetPlacementResourceProviderAllocations
func NewGetPlacementResourceProviderAllocationsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/resource_providers/%s/allocations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementResourceProviderInventoriesRequest generates requests for GetPlacementResourceProviderInventories
func NewGetPlacementResourceProviderInventoriesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/resource_providers/%s/inventories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlacementResourceProviderInventoryRequest generates requests for UpdatePlacementResourceProviderInventory
func NewUpdatePlacementResourceProviderInventoryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/resource_providers/%s/inventories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementResourceProviderTraitsRequest generates requests for GetPlacementResourceProviderTraits
func NewGetPlacementResourceProviderTraitsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/resource_providers/%s/traits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlacementResourceProviderTraitsRequest generates requests for UpdatePlacementResourceProviderTraits
func NewUpdatePlacementResourceProviderTraitsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/resource_providers/%s/traits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementTraitsRequest generates requests for GetPlacementTraits
func NewGetPlacementTraitsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placement/traits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGlanceVersionWithResponse request
	GetGlanceVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGlanceVersionResponse, error)

	// GetGlanceImagesWithResponse request
	GetGlanceImagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGlanceImagesResponse, error)

	// CreateGlanceImageWithResponse request
	CreateGlanceImageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateGlanceImageResponse, error)

	// DeleteGlanceImageByIDWithResponse request
	DeleteGlanceImageByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGlanceImageByIDResponse, error)

	// GetGlanceImageByIDWithResponse request
	GetGlanceImageByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGlanceImageByIDResponse, error)

	// GetGlanceImageFileByIDWithResponse request
	GetGlanceImageFileByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGlanceImageFileByIDResponse, error)

	// UploadGlanceImageFileWithResponse request
	UploadGlanceImageFileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UploadGlanceImageFileResponse, error)

	// GetGlanceSchemasImageWithResponse request
	GetGlanceSchemasImageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGlanceSchemasImageResponse, error)

	// GetNeutronVersionWithResponse request
	GetNeutronVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronVersionResponse, error)

	// GetNeutronAgentsWithResponse request
	GetNeutronAgentsWithResponse(ctx context.Context, params *GetNeutronAgentsParams, reqEditors ...RequestEditorFn) (*GetNeutronAgentsResponse, error)

	// GetNeutronExtensionsWithResponse request
	GetNeutronExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronExtensionsResponse, error)

	// GetNeutronNetworksWithResponse request
	GetNeutronNetworksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronNetworksResponse, error)

	// CreateNeutronNetworkWithResponse request
	CreateNeutronNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNeutronNetworkResponse, error)

	// DeleteNeutronNetworkByIDWithResponse request
	DeleteNeutronNetworkByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNeutronNetworkByIDResponse, error)

	// GetNeutronNetworkByIDWithResponse request
	GetNeutronNetworkByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNeutronNetworkByIDResponse, error)

	// GetNeutronPortsWithResponse request
	GetNeutronPortsWithResponse(ctx context.Context, params *GetNeutronPortsParams, reqEditors ...RequestEditorFn) (*GetNeutronPortsResponse, error)

	// CreateNeutronPortWithResponse request
	CreateNeutronPortWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNeutronPortResponse, error)

	// DeleteNeutronPortByIDWithResponse request
	DeleteNeutronPortByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNeutronPortByIDResponse, error)

	// GetNeutronPortByIDWithResponse request
	GetNeutronPortByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNeutronPortByIDResponse, error)

	// UpdateNeutronPortByIDWithResponse request
	UpdateNeutronPortByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UpdateNeutronPortByIDResponse, error)

	// GetNeutronQuotasByProjectIDWithResponse request
	GetNeutronQuotasByProjectIDWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetNeutronQuotasByProjectIDResponse, error)

	// GetNeutronSecurityGroupsWithResponse request
	GetNeutronSecurityGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronSecurityGroupsResponse, error)

	// GetNeutronSubnetsWithResponse request
	GetNeutronSubnetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronSubnetsResponse, error)

	// CreateNeutronSubnetWithResponse request
	CreateNeutronSubnetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNeutronSubnetResponse, error)

	// DeleteNeutronSubnetByIDWithResponse request
	DeleteNeutronSubnetByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNeutronSubnetByIDResponse, error)

	// GetNeutronSubnetByIDWithResponse request
	GetNeutronSubnetByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNeutronSubnetByIDResponse, error)

	// GetNovaVersionWithResponse request
	GetNovaVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNovaVersionResponse, error)

	// CreateNovaFlavorWithResponse request
	CreateNovaFlavorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNovaFlavorResponse, error)

	// GetNovaFlavorsDetailWithResponse request
	GetNovaFlavorsDetailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNovaFlavorsDetailResponse, error)

	// GetNovaFlavorByIDWithResponse request
	GetNovaFlavorByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNovaFlavorByIDResponse, error)

	// CreateNovaExternalEventsWithResponse request
	CreateNovaExternalEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNovaExternalEventsResponse, error)

	// GetNovaServicesWithResponse request
	GetNovaServicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNovaServicesResponse, error)

	// CreateNovaServerWithBodyWithResponse request with any body
	CreateNovaServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNovaServerResponse, error)

	CreateNovaServerWithResponse(ctx context.Context, body CreateNovaServerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNovaServerResponse, error)

	// GetNovaServersDetailWithResponse request
	GetNovaServersDetailWithResponse(ctx context.Context, params *GetNovaServersDetailParams, reqEditors ...RequestEditorFn) (*GetNovaServersDetailResponse, error)

	// DeleteNovaServerByIDWithResponse request
	DeleteNovaServerByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNovaServerByIDResponse, error)

	// GetNovaServerByIDWithResponse request
	GetNovaServerByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNovaServerByIDResponse, error)

	// ActionNovaServerWithBodyWithResponse request with any body
	ActionNovaServerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionNovaServerResponse, error)

	ActionNovaServerWithResponse(ctx context.Context, id string, body ActionNovaServerJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionNovaServerResponse, error)

	// GetPlacementVersionWithResponse request
	GetPlacementVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementVersionResponse, error)

	// GetPlacementVersion2WithResponse request
	GetPlacementVersion2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementVersion2Response, error)

	// GetPlacementAllocationCandidatesWithResponse request
	GetPlacementAllocationCandidatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementAllocationCandidatesResponse, error)

	// DeletePlacementAllocationByIDWithResponse request
	DeletePlacementAllocationByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlacementAllocationByIDResponse, error)

	// GetPlacementAllocationByIDWithResponse request
	GetPlacementAllocationByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementAllocationByIDResponse, error)

	// UpdatePlacementAllocationByIDWithBodyWithResponse request with any body
	UpdatePlacementAllocationByIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlacementAllocationByIDResponse, error)

	UpdatePlacementAllocationByIDWithResponse(ctx context.Context, id string, body UpdatePlacementAllocationByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlacementAllocationByIDResponse, error)

	// GetPlacementResourceProvidersWithResponse request
	GetPlacementResourceProvidersWithResponse(ctx context.Context, params *GetPlacementResourceProvidersParams, reqEditors ...RequestEditorFn) (*GetPlacementResourceProvidersResponse, error)

	// CreatePlacementResourceProviderWithResponse request
	CreatePlacementResourceProviderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePlacementResourceProviderResponse, error)

	// GetPlacementResourceProviderAggregatesWithResponse request
	GetPlacementResourceProviderAggregatesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementResourceProviderAggregatesResponse, error)

	// GetPlacementResourceProviderAllocationsWithResponse request
	GetPlacementResourceProviderAllocationsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementResourceProviderAllocationsResponse, error)

	// GetPlacementResourceProviderInventoriesWithResponse request
	GetPlacementResourceProviderInventoriesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementResourceProviderInventoriesResponse, error)

	// UpdatePlacementResourceProviderInventoryWithResponse request
	UpdatePlacementResourceProviderInventoryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UpdatePlacementResourceProviderInventoryResponse, error)

	// GetPlacementResourceProviderTraitsWithResponse request
	GetPlacementResourceProviderTraitsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementResourceProviderTraitsResponse, error)

	// UpdatePlacementResourceProviderTraitsWithResponse request
	UpdatePlacementResourceProviderTraitsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UpdatePlacementResourceProviderTraitsResponse, error)

	// GetPlacementTraitsWithResponse request
	GetPlacementTraitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementTraitsResponse, error)
}

type GetGlanceVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceVersionResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetGlanceVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlanceVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlanceImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImagesResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetGlanceImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlanceImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGlanceImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r CreateGlanceImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGlanceImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGlanceImageByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r DeleteGlanceImageByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGlanceImageByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlanceImageByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetGlanceImageByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlanceImageByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlanceImageFileByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetGlanceImageFileByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlanceImageFileByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadGlanceImageFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r UploadGlanceImageFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadGlanceImageFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlanceSchemasImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImagesResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetGlanceSchemasImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlanceSchemasImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronVersionResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronNetworksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronNetworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronNetworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNeutronNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r CreateNeutronNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNeutronNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNeutronNetworkByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r DeleteNeutronNetworkByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNeutronNetworkByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronNetworkByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworkResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronNetworkByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronNetworkByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronPortsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronPortsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronPortsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNeutronPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r CreateNeutronPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNeutronPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNeutronPortByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r DeleteNeutronPortByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNeutronPortByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronPortByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronPortByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronPortByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNeutronPortByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r UpdateNeutronPortByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNeutronPortByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronQuotasByProjectIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworkResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronQuotasByProjectIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronQuotasByProjectIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronSecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImagesResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronSecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronSecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronSubnetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronSubnetsResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronSubnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronSubnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNeutronSubnetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronSubnetsResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r CreateNeutronSubnetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNeutronSubnetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNeutronSubnetByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r DeleteNeutronSubnetByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNeutronSubnetByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNeutronSubnetByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronSubnetResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNeutronSubnetByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNeutronSubnetByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNovaVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NovaVersionResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNovaVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNovaVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNovaFlavorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NovaFlavorsDetailResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r CreateNovaFlavorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNovaFlavorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNovaFlavorsDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NovaFlavorsDetailResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNovaFlavorsDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNovaFlavorsDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNovaFlavorByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NovaFlavorResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNovaFlavorByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNovaFlavorByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNovaExternalEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r CreateNovaExternalEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNovaExternalEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNovaServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNovaServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNovaServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNovaServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NovaServerResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r CreateNovaServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNovaServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNovaServersDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NovaServersDetailResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNovaServersDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNovaServersDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNovaServerByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r DeleteNovaServerByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNovaServerByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNovaServerByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworkResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetNovaServerByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNovaServerByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionNovaServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworkResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r ActionNovaServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionNovaServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementVersionResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementVersion2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlacementVersionResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementVersion2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementVersion2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementAllocationCandidatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementAllocationCandidatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementAllocationCandidatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlacementAllocationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r DeletePlacementAllocationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlacementAllocationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementAllocationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementAllocationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementAllocationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlacementAllocationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NovaServerResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r UpdatePlacementAllocationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlacementAllocationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementResourceProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementResourceProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementResourceProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlacementResourceProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r CreatePlacementResourceProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlacementResourceProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementResourceProviderAggregatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementResourceProviderAggregatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementResourceProviderAggregatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementResourceProviderAllocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementResourceProviderAllocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementResourceProviderAllocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementResourceProviderInventoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementResourceProviderInventoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementResourceProviderInventoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlacementResourceProviderInventoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r UpdatePlacementResourceProviderInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlacementResourceProviderInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementResourceProviderTraitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementResourceProviderTraitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementResourceProviderTraitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlacementResourceProviderTraitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlanceImageResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r UpdatePlacementResourceProviderTraitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlacementResourceProviderTraitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementTraitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NeutronNetworksResponse
	JSON4XX      *N4XX
	JSONDefault  *Default
}

// Status returns HTTPResponse.Status
func (r GetPlacementTraitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementTraitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGlanceVersionWithResponse request returning *GetGlanceVersionResponse
func (c *ClientWithResponses) GetGlanceVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGlanceVersionResponse, error) {
	rsp, err := c.GetGlanceVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlanceVersionResponse(rsp)
}

// GetGlanceImagesWithResponse request returning *GetGlanceImagesResponse
func (c *ClientWithResponses) GetGlanceImagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGlanceImagesResponse, error) {
	rsp, err := c.GetGlanceImages(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlanceImagesResponse(rsp)
}

// CreateGlanceImageWithResponse request returning *CreateGlanceImageResponse
func (c *ClientWithResponses) CreateGlanceImageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateGlanceImageResponse, error) {
	rsp, err := c.CreateGlanceImage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGlanceImageResponse(rsp)
}

// DeleteGlanceImageByIDWithResponse request returning *DeleteGlanceImageByIDResponse
func (c *ClientWithResponses) DeleteGlanceImageByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGlanceImageByIDResponse, error) {
	rsp, err := c.DeleteGlanceImageByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGlanceImageByIDResponse(rsp)
}

// GetGlanceImageByIDWithResponse request returning *GetGlanceImageByIDResponse
func (c *ClientWithResponses) GetGlanceImageByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGlanceImageByIDResponse, error) {
	rsp, err := c.GetGlanceImageByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlanceImageByIDResponse(rsp)
}

// GetGlanceImageFileByIDWithResponse request returning *GetGlanceImageFileByIDResponse
func (c *ClientWithResponses) GetGlanceImageFileByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGlanceImageFileByIDResponse, error) {
	rsp, err := c.GetGlanceImageFileByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlanceImageFileByIDResponse(rsp)
}

// UploadGlanceImageFileWithResponse request returning *UploadGlanceImageFileResponse
func (c *ClientWithResponses) UploadGlanceImageFileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UploadGlanceImageFileResponse, error) {
	rsp, err := c.UploadGlanceImageFile(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadGlanceImageFileResponse(rsp)
}

// GetGlanceSchemasImageWithResponse request returning *GetGlanceSchemasImageResponse
func (c *ClientWithResponses) GetGlanceSchemasImageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGlanceSchemasImageResponse, error) {
	rsp, err := c.GetGlanceSchemasImage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlanceSchemasImageResponse(rsp)
}

// GetNeutronVersionWithResponse request returning *GetNeutronVersionResponse
func (c *ClientWithResponses) GetNeutronVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronVersionResponse, error) {
	rsp, err := c.GetNeutronVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronVersionResponse(rsp)
}

// GetNeutronAgentsWithResponse request returning *GetNeutronAgentsResponse
func (c *ClientWithResponses) GetNeutronAgentsWithResponse(ctx context.Context, params *GetNeutronAgentsParams, reqEditors ...RequestEditorFn) (*GetNeutronAgentsResponse, error) {
	rsp, err := c.GetNeutronAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronAgentsResponse(rsp)
}

// GetNeutronExtensionsWithResponse request returning *GetNeutronExtensionsResponse
func (c *ClientWithResponses) GetNeutronExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronExtensionsResponse, error) {
	rsp, err := c.GetNeutronExtensions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronExtensionsResponse(rsp)
}

// GetNeutronNetworksWithResponse request returning *GetNeutronNetworksResponse
func (c *ClientWithResponses) GetNeutronNetworksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronNetworksResponse, error) {
	rsp, err := c.GetNeutronNetworks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronNetworksResponse(rsp)
}

// CreateNeutronNetworkWithResponse request returning *CreateNeutronNetworkResponse
func (c *ClientWithResponses) CreateNeutronNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNeutronNetworkResponse, error) {
	rsp, err := c.CreateNeutronNetwork(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNeutronNetworkResponse(rsp)
}

// DeleteNeutronNetworkByIDWithResponse request returning *DeleteNeutronNetworkByIDResponse
func (c *ClientWithResponses) DeleteNeutronNetworkByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNeutronNetworkByIDResponse, error) {
	rsp, err := c.DeleteNeutronNetworkByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNeutronNetworkByIDResponse(rsp)
}

// GetNeutronNetworkByIDWithResponse request returning *GetNeutronNetworkByIDResponse
func (c *ClientWithResponses) GetNeutronNetworkByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNeutronNetworkByIDResponse, error) {
	rsp, err := c.GetNeutronNetworkByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronNetworkByIDResponse(rsp)
}

// GetNeutronPortsWithResponse request returning *GetNeutronPortsResponse
func (c *ClientWithResponses) GetNeutronPortsWithResponse(ctx context.Context, params *GetNeutronPortsParams, reqEditors ...RequestEditorFn) (*GetNeutronPortsResponse, error) {
	rsp, err := c.GetNeutronPorts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronPortsResponse(rsp)
}

// CreateNeutronPortWithResponse request returning *CreateNeutronPortResponse
func (c *ClientWithResponses) CreateNeutronPortWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNeutronPortResponse, error) {
	rsp, err := c.CreateNeutronPort(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNeutronPortResponse(rsp)
}

// DeleteNeutronPortByIDWithResponse request returning *DeleteNeutronPortByIDResponse
func (c *ClientWithResponses) DeleteNeutronPortByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNeutronPortByIDResponse, error) {
	rsp, err := c.DeleteNeutronPortByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNeutronPortByIDResponse(rsp)
}

// GetNeutronPortByIDWithResponse request returning *GetNeutronPortByIDResponse
func (c *ClientWithResponses) GetNeutronPortByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNeutronPortByIDResponse, error) {
	rsp, err := c.GetNeutronPortByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronPortByIDResponse(rsp)
}

// UpdateNeutronPortByIDWithResponse request returning *UpdateNeutronPortByIDResponse
func (c *ClientWithResponses) UpdateNeutronPortByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UpdateNeutronPortByIDResponse, error) {
	rsp, err := c.UpdateNeutronPortByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNeutronPortByIDResponse(rsp)
}

// GetNeutronQuotasByProjectIDWithResponse request returning *GetNeutronQuotasByProjectIDResponse
func (c *ClientWithResponses) GetNeutronQuotasByProjectIDWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetNeutronQuotasByProjectIDResponse, error) {
	rsp, err := c.GetNeutronQuotasByProjectID(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronQuotasByProjectIDResponse(rsp)
}

// GetNeutronSecurityGroupsWithResponse request returning *GetNeutronSecurityGroupsResponse
func (c *ClientWithResponses) GetNeutronSecurityGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronSecurityGroupsResponse, error) {
	rsp, err := c.GetNeutronSecurityGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronSecurityGroupsResponse(rsp)
}

// GetNeutronSubnetsWithResponse request returning *GetNeutronSubnetsResponse
func (c *ClientWithResponses) GetNeutronSubnetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNeutronSubnetsResponse, error) {
	rsp, err := c.GetNeutronSubnets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronSubnetsResponse(rsp)
}

// CreateNeutronSubnetWithResponse request returning *CreateNeutronSubnetResponse
func (c *ClientWithResponses) CreateNeutronSubnetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNeutronSubnetResponse, error) {
	rsp, err := c.CreateNeutronSubnet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNeutronSubnetResponse(rsp)
}

// DeleteNeutronSubnetByIDWithResponse request returning *DeleteNeutronSubnetByIDResponse
func (c *ClientWithResponses) DeleteNeutronSubnetByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNeutronSubnetByIDResponse, error) {
	rsp, err := c.DeleteNeutronSubnetByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNeutronSubnetByIDResponse(rsp)
}

// GetNeutronSubnetByIDWithResponse request returning *GetNeutronSubnetByIDResponse
func (c *ClientWithResponses) GetNeutronSubnetByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNeutronSubnetByIDResponse, error) {
	rsp, err := c.GetNeutronSubnetByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNeutronSubnetByIDResponse(rsp)
}

// GetNovaVersionWithResponse request returning *GetNovaVersionResponse
func (c *ClientWithResponses) GetNovaVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNovaVersionResponse, error) {
	rsp, err := c.GetNovaVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNovaVersionResponse(rsp)
}

// CreateNovaFlavorWithResponse request returning *CreateNovaFlavorResponse
func (c *ClientWithResponses) CreateNovaFlavorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNovaFlavorResponse, error) {
	rsp, err := c.CreateNovaFlavor(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNovaFlavorResponse(rsp)
}

// GetNovaFlavorsDetailWithResponse request returning *GetNovaFlavorsDetailResponse
func (c *ClientWithResponses) GetNovaFlavorsDetailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNovaFlavorsDetailResponse, error) {
	rsp, err := c.GetNovaFlavorsDetail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNovaFlavorsDetailResponse(rsp)
}

// GetNovaFlavorByIDWithResponse request returning *GetNovaFlavorByIDResponse
func (c *ClientWithResponses) GetNovaFlavorByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNovaFlavorByIDResponse, error) {
	rsp, err := c.GetNovaFlavorByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNovaFlavorByIDResponse(rsp)
}

// CreateNovaExternalEventsWithResponse request returning *CreateNovaExternalEventsResponse
func (c *ClientWithResponses) CreateNovaExternalEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateNovaExternalEventsResponse, error) {
	rsp, err := c.CreateNovaExternalEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNovaExternalEventsResponse(rsp)
}

// GetNovaServicesWithResponse request returning *GetNovaServicesResponse
func (c *ClientWithResponses) GetNovaServicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNovaServicesResponse, error) {
	rsp, err := c.GetNovaServices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNovaServicesResponse(rsp)
}

// CreateNovaServerWithBodyWithResponse request with arbitrary body returning *CreateNovaServerResponse
func (c *ClientWithResponses) CreateNovaServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNovaServerResponse, error) {
	rsp, err := c.CreateNovaServerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNovaServerResponse(rsp)
}

func (c *ClientWithResponses) CreateNovaServerWithResponse(ctx context.Context, body CreateNovaServerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNovaServerResponse, error) {
	rsp, err := c.CreateNovaServer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNovaServerResponse(rsp)
}

// GetNovaServersDetailWithResponse request returning *GetNovaServersDetailResponse
func (c *ClientWithResponses) GetNovaServersDetailWithResponse(ctx context.Context, params *GetNovaServersDetailParams, reqEditors ...RequestEditorFn) (*GetNovaServersDetailResponse, error) {
	rsp, err := c.GetNovaServersDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNovaServersDetailResponse(rsp)
}

// DeleteNovaServerByIDWithResponse request returning *DeleteNovaServerByIDResponse
func (c *ClientWithResponses) DeleteNovaServerByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNovaServerByIDResponse, error) {
	rsp, err := c.DeleteNovaServerByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNovaServerByIDResponse(rsp)
}

// GetNovaServerByIDWithResponse request returning *GetNovaServerByIDResponse
func (c *ClientWithResponses) GetNovaServerByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNovaServerByIDResponse, error) {
	rsp, err := c.GetNovaServerByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNovaServerByIDResponse(rsp)
}

// ActionNovaServerWithBodyWithResponse request with arbitrary body returning *ActionNovaServerResponse
func (c *ClientWithResponses) ActionNovaServerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionNovaServerResponse, error) {
	rsp, err := c.ActionNovaServerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionNovaServerResponse(rsp)
}

func (c *ClientWithResponses) ActionNovaServerWithResponse(ctx context.Context, id string, body ActionNovaServerJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionNovaServerResponse, error) {
	rsp, err := c.ActionNovaServer(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionNovaServerResponse(rsp)
}

// GetPlacementVersionWithResponse request returning *GetPlacementVersionResponse
func (c *ClientWithResponses) GetPlacementVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementVersionResponse, error) {
	rsp, err := c.GetPlacementVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementVersionResponse(rsp)
}

// GetPlacementVersion2WithResponse request returning *GetPlacementVersion2Response
func (c *ClientWithResponses) GetPlacementVersion2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementVersion2Response, error) {
	rsp, err := c.GetPlacementVersion2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementVersion2Response(rsp)
}

// GetPlacementAllocationCandidatesWithResponse request returning *GetPlacementAllocationCandidatesResponse
func (c *ClientWithResponses) GetPlacementAllocationCandidatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementAllocationCandidatesResponse, error) {
	rsp, err := c.GetPlacementAllocationCandidates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementAllocationCandidatesResponse(rsp)
}

// DeletePlacementAllocationByIDWithResponse request returning *DeletePlacementAllocationByIDResponse
func (c *ClientWithResponses) DeletePlacementAllocationByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlacementAllocationByIDResponse, error) {
	rsp, err := c.DeletePlacementAllocationByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlacementAllocationByIDResponse(rsp)
}

// GetPlacementAllocationByIDWithResponse request returning *GetPlacementAllocationByIDResponse
func (c *ClientWithResponses) GetPlacementAllocationByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementAllocationByIDResponse, error) {
	rsp, err := c.GetPlacementAllocationByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementAllocationByIDResponse(rsp)
}

// UpdatePlacementAllocationByIDWithBodyWithResponse request with arbitrary body returning *UpdatePlacementAllocationByIDResponse
func (c *ClientWithResponses) UpdatePlacementAllocationByIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlacementAllocationByIDResponse, error) {
	rsp, err := c.UpdatePlacementAllocationByIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementAllocationByIDResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlacementAllocationByIDWithResponse(ctx context.Context, id string, body UpdatePlacementAllocationByIDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlacementAllocationByIDResponse, error) {
	rsp, err := c.UpdatePlacementAllocationByID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementAllocationByIDResponse(rsp)
}

// GetPlacementResourceProvidersWithResponse request returning *GetPlacementResourceProvidersResponse
func (c *ClientWithResponses) GetPlacementResourceProvidersWithResponse(ctx context.Context, params *GetPlacementResourceProvidersParams, reqEditors ...RequestEditorFn) (*GetPlacementResourceProvidersResponse, error) {
	rsp, err := c.GetPlacementResourceProviders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementResourceProvidersResponse(rsp)
}

// CreatePlacementResourceProviderWithResponse request returning *CreatePlacementResourceProviderResponse
func (c *ClientWithResponses) CreatePlacementResourceProviderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePlacementResourceProviderResponse, error) {
	rsp, err := c.CreatePlacementResourceProvider(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlacementResourceProviderResponse(rsp)
}

// GetPlacementResourceProviderAggregatesWithResponse request returning *GetPlacementResourceProviderAggregatesResponse
func (c *ClientWithResponses) GetPlacementResourceProviderAggregatesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementResourceProviderAggregatesResponse, error) {
	rsp, err := c.GetPlacementResourceProviderAggregates(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementResourceProviderAggregatesResponse(rsp)
}

// GetPlacementResourceProviderAllocationsWithResponse request returning *GetPlacementResourceProviderAllocationsResponse
func (c *ClientWithResponses) GetPlacementResourceProviderAllocationsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementResourceProviderAllocationsResponse, error) {
	rsp, err := c.GetPlacementResourceProviderAllocations(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementResourceProviderAllocationsResponse(rsp)
}

// GetPlacementResourceProviderInventoriesWithResponse request returning *GetPlacementResourceProviderInventoriesResponse
func (c *ClientWithResponses) GetPlacementResourceProviderInventoriesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementResourceProviderInventoriesResponse, error) {
	rsp, err := c.GetPlacementResourceProviderInventories(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementResourceProviderInventoriesResponse(rsp)
}

// UpdatePlacementResourceProviderInventoryWithResponse request returning *UpdatePlacementResourceProviderInventoryResponse
func (c *ClientWithResponses) UpdatePlacementResourceProviderInventoryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UpdatePlacementResourceProviderInventoryResponse, error) {
	rsp, err := c.UpdatePlacementResourceProviderInventory(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementResourceProviderInventoryResponse(rsp)
}

// GetPlacementResourceProviderTraitsWithResponse request returning *GetPlacementResourceProviderTraitsResponse
func (c *ClientWithResponses) GetPlacementResourceProviderTraitsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlacementResourceProviderTraitsResponse, error) {
	rsp, err := c.GetPlacementResourceProviderTraits(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementResourceProviderTraitsResponse(rsp)
}

// UpdatePlacementResourceProviderTraitsWithResponse request returning *UpdatePlacementResourceProviderTraitsResponse
func (c *ClientWithResponses) UpdatePlacementResourceProviderTraitsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UpdatePlacementResourceProviderTraitsResponse, error) {
	rsp, err := c.UpdatePlacementResourceProviderTraits(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlacementResourceProviderTraitsResponse(rsp)
}

// GetPlacementTraitsWithResponse request returning *GetPlacementTraitsResponse
func (c *ClientWithResponses) GetPlacementTraitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementTraitsResponse, error) {
	rsp, err := c.GetPlacementTraits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementTraitsResponse(rsp)
}

// ParseGetGlanceVersionResponse parses an HTTP response from a GetGlanceVersionWithResponse call
func ParseGetGlanceVersionResponse(rsp *http.Response) (*GetGlanceVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlanceVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGlanceImagesResponse parses an HTTP response from a GetGlanceImagesWithResponse call
func ParseGetGlanceImagesResponse(rsp *http.Response) (*GetGlanceImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlanceImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGlanceImageResponse parses an HTTP response from a CreateGlanceImageWithResponse call
func ParseCreateGlanceImageResponse(rsp *http.Response) (*CreateGlanceImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGlanceImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGlanceImageByIDResponse parses an HTTP response from a DeleteGlanceImageByIDWithResponse call
func ParseDeleteGlanceImageByIDResponse(rsp *http.Response) (*DeleteGlanceImageByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGlanceImageByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGlanceImageByIDResponse parses an HTTP response from a GetGlanceImageByIDWithResponse call
func ParseGetGlanceImageByIDResponse(rsp *http.Response) (*GetGlanceImageByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlanceImageByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGlanceImageFileByIDResponse parses an HTTP response from a GetGlanceImageFileByIDWithResponse call
func ParseGetGlanceImageFileByIDResponse(rsp *http.Response) (*GetGlanceImageFileByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlanceImageFileByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUploadGlanceImageFileResponse parses an HTTP response from a UploadGlanceImageFileWithResponse call
func ParseUploadGlanceImageFileResponse(rsp *http.Response) (*UploadGlanceImageFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadGlanceImageFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGlanceSchemasImageResponse parses an HTTP response from a GetGlanceSchemasImageWithResponse call
func ParseGetGlanceSchemasImageResponse(rsp *http.Response) (*GetGlanceSchemasImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlanceSchemasImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronVersionResponse parses an HTTP response from a GetNeutronVersionWithResponse call
func ParseGetNeutronVersionResponse(rsp *http.Response) (*GetNeutronVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronAgentsResponse parses an HTTP response from a GetNeutronAgentsWithResponse call
func ParseGetNeutronAgentsResponse(rsp *http.Response) (*GetNeutronAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronExtensionsResponse parses an HTTP response from a GetNeutronExtensionsWithResponse call
func ParseGetNeutronExtensionsResponse(rsp *http.Response) (*GetNeutronExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronNetworksResponse parses an HTTP response from a GetNeutronNetworksWithResponse call
func ParseGetNeutronNetworksResponse(rsp *http.Response) (*GetNeutronNetworksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronNetworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNeutronNetworkResponse parses an HTTP response from a CreateNeutronNetworkWithResponse call
func ParseCreateNeutronNetworkResponse(rsp *http.Response) (*CreateNeutronNetworkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNeutronNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNeutronNetworkByIDResponse parses an HTTP response from a DeleteNeutronNetworkByIDWithResponse call
func ParseDeleteNeutronNetworkByIDResponse(rsp *http.Response) (*DeleteNeutronNetworkByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNeutronNetworkByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronNetworkByIDResponse parses an HTTP response from a GetNeutronNetworkByIDWithResponse call
func ParseGetNeutronNetworkByIDResponse(rsp *http.Response) (*GetNeutronNetworkByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronNetworkByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronPortsResponse parses an HTTP response from a GetNeutronPortsWithResponse call
func ParseGetNeutronPortsResponse(rsp *http.Response) (*GetNeutronPortsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronPortsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNeutronPortResponse parses an HTTP response from a CreateNeutronPortWithResponse call
func ParseCreateNeutronPortResponse(rsp *http.Response) (*CreateNeutronPortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNeutronPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNeutronPortByIDResponse parses an HTTP response from a DeleteNeutronPortByIDWithResponse call
func ParseDeleteNeutronPortByIDResponse(rsp *http.Response) (*DeleteNeutronPortByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNeutronPortByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronPortByIDResponse parses an HTTP response from a GetNeutronPortByIDWithResponse call
func ParseGetNeutronPortByIDResponse(rsp *http.Response) (*GetNeutronPortByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronPortByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateNeutronPortByIDResponse parses an HTTP response from a UpdateNeutronPortByIDWithResponse call
func ParseUpdateNeutronPortByIDResponse(rsp *http.Response) (*UpdateNeutronPortByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNeutronPortByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronQuotasByProjectIDResponse parses an HTTP response from a GetNeutronQuotasByProjectIDWithResponse call
func ParseGetNeutronQuotasByProjectIDResponse(rsp *http.Response) (*GetNeutronQuotasByProjectIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronQuotasByProjectIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronSecurityGroupsResponse parses an HTTP response from a GetNeutronSecurityGroupsWithResponse call
func ParseGetNeutronSecurityGroupsResponse(rsp *http.Response) (*GetNeutronSecurityGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronSecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronSubnetsResponse parses an HTTP response from a GetNeutronSubnetsWithResponse call
func ParseGetNeutronSubnetsResponse(rsp *http.Response) (*GetNeutronSubnetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronSubnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronSubnetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNeutronSubnetResponse parses an HTTP response from a CreateNeutronSubnetWithResponse call
func ParseCreateNeutronSubnetResponse(rsp *http.Response) (*CreateNeutronSubnetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNeutronSubnetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronSubnetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNeutronSubnetByIDResponse parses an HTTP response from a DeleteNeutronSubnetByIDWithResponse call
func ParseDeleteNeutronSubnetByIDResponse(rsp *http.Response) (*DeleteNeutronSubnetByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNeutronSubnetByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNeutronSubnetByIDResponse parses an HTTP response from a GetNeutronSubnetByIDWithResponse call
func ParseGetNeutronSubnetByIDResponse(rsp *http.Response) (*GetNeutronSubnetByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNeutronSubnetByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronSubnetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNovaVersionResponse parses an HTTP response from a GetNovaVersionWithResponse call
func ParseGetNovaVersionResponse(rsp *http.Response) (*GetNovaVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNovaVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NovaVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNovaFlavorResponse parses an HTTP response from a CreateNovaFlavorWithResponse call
func ParseCreateNovaFlavorResponse(rsp *http.Response) (*CreateNovaFlavorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNovaFlavorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NovaFlavorsDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNovaFlavorsDetailResponse parses an HTTP response from a GetNovaFlavorsDetailWithResponse call
func ParseGetNovaFlavorsDetailResponse(rsp *http.Response) (*GetNovaFlavorsDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNovaFlavorsDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NovaFlavorsDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNovaFlavorByIDResponse parses an HTTP response from a GetNovaFlavorByIDWithResponse call
func ParseGetNovaFlavorByIDResponse(rsp *http.Response) (*GetNovaFlavorByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNovaFlavorByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NovaFlavorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNovaExternalEventsResponse parses an HTTP response from a CreateNovaExternalEventsWithResponse call
func ParseCreateNovaExternalEventsResponse(rsp *http.Response) (*CreateNovaExternalEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNovaExternalEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNovaServicesResponse parses an HTTP response from a GetNovaServicesWithResponse call
func ParseGetNovaServicesResponse(rsp *http.Response) (*GetNovaServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNovaServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNovaServerResponse parses an HTTP response from a CreateNovaServerWithResponse call
func ParseCreateNovaServerResponse(rsp *http.Response) (*CreateNovaServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNovaServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NovaServerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNovaServersDetailResponse parses an HTTP response from a GetNovaServersDetailWithResponse call
func ParseGetNovaServersDetailResponse(rsp *http.Response) (*GetNovaServersDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNovaServersDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NovaServersDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNovaServerByIDResponse parses an HTTP response from a DeleteNovaServerByIDWithResponse call
func ParseDeleteNovaServerByIDResponse(rsp *http.Response) (*DeleteNovaServerByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNovaServerByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNovaServerByIDResponse parses an HTTP response from a GetNovaServerByIDWithResponse call
func ParseGetNovaServerByIDResponse(rsp *http.Response) (*GetNovaServerByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNovaServerByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionNovaServerResponse parses an HTTP response from a ActionNovaServerWithResponse call
func ParseActionNovaServerResponse(rsp *http.Response) (*ActionNovaServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionNovaServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementVersionResponse parses an HTTP response from a GetPlacementVersionWithResponse call
func ParseGetPlacementVersionResponse(rsp *http.Response) (*GetPlacementVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementVersion2Response parses an HTTP response from a GetPlacementVersion2WithResponse call
func ParseGetPlacementVersion2Response(rsp *http.Response) (*GetPlacementVersion2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementVersion2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlacementVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementAllocationCandidatesResponse parses an HTTP response from a GetPlacementAllocationCandidatesWithResponse call
func ParseGetPlacementAllocationCandidatesResponse(rsp *http.Response) (*GetPlacementAllocationCandidatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementAllocationCandidatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePlacementAllocationByIDResponse parses an HTTP response from a DeletePlacementAllocationByIDWithResponse call
func ParseDeletePlacementAllocationByIDResponse(rsp *http.Response) (*DeletePlacementAllocationByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlacementAllocationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementAllocationByIDResponse parses an HTTP response from a GetPlacementAllocationByIDWithResponse call
func ParseGetPlacementAllocationByIDResponse(rsp *http.Response) (*GetPlacementAllocationByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementAllocationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePlacementAllocationByIDResponse parses an HTTP response from a UpdatePlacementAllocationByIDWithResponse call
func ParseUpdatePlacementAllocationByIDResponse(rsp *http.Response) (*UpdatePlacementAllocationByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlacementAllocationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NovaServerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementResourceProvidersResponse parses an HTTP response from a GetPlacementResourceProvidersWithResponse call
func ParseGetPlacementResourceProvidersResponse(rsp *http.Response) (*GetPlacementResourceProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementResourceProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePlacementResourceProviderResponse parses an HTTP response from a CreatePlacementResourceProviderWithResponse call
func ParseCreatePlacementResourceProviderResponse(rsp *http.Response) (*CreatePlacementResourceProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlacementResourceProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementResourceProviderAggregatesResponse parses an HTTP response from a GetPlacementResourceProviderAggregatesWithResponse call
func ParseGetPlacementResourceProviderAggregatesResponse(rsp *http.Response) (*GetPlacementResourceProviderAggregatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementResourceProviderAggregatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementResourceProviderAllocationsResponse parses an HTTP response from a GetPlacementResourceProviderAllocationsWithResponse call
func ParseGetPlacementResourceProviderAllocationsResponse(rsp *http.Response) (*GetPlacementResourceProviderAllocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementResourceProviderAllocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementResourceProviderInventoriesResponse parses an HTTP response from a GetPlacementResourceProviderInventoriesWithResponse call
func ParseGetPlacementResourceProviderInventoriesResponse(rsp *http.Response) (*GetPlacementResourceProviderInventoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementResourceProviderInventoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePlacementResourceProviderInventoryResponse parses an HTTP response from a UpdatePlacementResourceProviderInventoryWithResponse call
func ParseUpdatePlacementResourceProviderInventoryResponse(rsp *http.Response) (*UpdatePlacementResourceProviderInventoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlacementResourceProviderInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementResourceProviderTraitsResponse parses an HTTP response from a GetPlacementResourceProviderTraitsWithResponse call
func ParseGetPlacementResourceProviderTraitsResponse(rsp *http.Response) (*GetPlacementResourceProviderTraitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementResourceProviderTraitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePlacementResourceProviderTraitsResponse parses an HTTP response from a UpdatePlacementResourceProviderTraitsWithResponse call
func ParseUpdatePlacementResourceProviderTraitsResponse(rsp *http.Response) (*UpdatePlacementResourceProviderTraitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlacementResourceProviderTraitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlanceImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlacementTraitsResponse parses an HTTP response from a GetPlacementTraitsWithResponse call
func ParseGetPlacementTraitsResponse(rsp *http.Response) (*GetPlacementTraitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementTraitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NeutronNetworksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest N4XX
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w923LbOpK/wuLuw2yVqJslS9bTOrGT8W4m8drOqdSkUhyIbEkYkwQDgLJ9Uv73LRCk",
	"eAMpSqYk+0TzMidmA93obvQVgH7pFnF94oHHmT75pVNgPvEYhP8YfPsm/s8iHgePi/9Evu9gC3FMvM6/",
	"GfHE35i1ABeJ//pPCjN9ov9HJ5mzI7+yziWlhOrPz88t3QZmUeyLSfSJHnjw6IPFwdZAwgiIGQocfgjk",
	"z61ozpAD55YAvAW6BHoDPwNgISU+JT5QjiWbCDMYRzT84gWOg6YO6BNOA2jp/MkHfaKT6b/B4mJpITDx",
	"a8A+K0a/p4A4rKGHhZ+Lf586xLo3bVhiC0wX+T725uayLz5hDi5TjCCEm9iz4VH8Cx6R6wtyuyvKsMdh",
	"DpHMHOBgEs/kQF3sIcni1LDMKqeEOIA8OZLxCN6UX1ODdIdYyNFX4xin2JuLYYwE1ALFCOyiOahGBAG2",
	"s6CWNbRPhtbI6PVOT4zB4HRkTIentoHGZ6Mz6E1nfetMb+kzQl3Ehb6IGQozqyQV/QFRip7Ev2cOWhJ6",
	"I3Q0TUBPRWe4gAJoM7S2dBc9mhYJ5J5aTd9TydTFXl1QD7k5MXBgfOmqKPCAPxB6zyo0ryiqvj1CCNCZ",
	"cTrqnRkDGJ8aZ8gaGtbopAezLpqdWdCEqJ5bOoWfAaZg65PvCa1pbqTF2SrdVxFTUvJMM/9HrQ0vLVeB",
	"PRaxQ25nrVkIrIXfUozAIcEK4QJjYqOUTBN/VrEwzaAIXQz+47mlf3SQZ8GVG82eI30B1j0LXPHfBc0Q",
	"1h5hD6gZk68CCo2gbcrPq3XaiIPBsavc+jZm91VzzrADmdkCipVb085Cle0x7JkCZQYYe/ykr5ftM4rc",
	"mtDxVitgJcxcILYwkTMnlQBL5ATlU2DbBi/1NWWqyYMnPUtxoPhiMh8sPMNgt4kPHuPIum+79nDDEZH6",
	"bzaILVB/eKoc5FPCQyevXlQSQ6yTPgNnVgsO/wl5YZ4OlMJkHPEg3BjgiU3xXUcWx0uhxAwtxXwt/WcA",
	"AQg9u8eOA3bKdKRQckLlBit84mieNbVFiJyzCnx74x22xJQHyDE3WPsSMzzFDuZP6fX7wdTBli7EhpeI",
	"g2K5KkuZMjo3URBbND44tklV0WLafK1DxcpxzTBlvJZNCSfKSKg2eUXZ1dXm8oX9AZRFsVuOe7ZSexzs",
	"3W9KfoTjE/bulYtY7Ypq5xNa3wg4JuTHuoWFSAuLW1CotbcpOOvpCieTsGvJKdegpQTYkrdrQ5vV9CoS",
	"P0PAKfE+y/CnSBuyhdMSrAcz8GvF+WiJsIPkhjf/JB6YCxylnaux33+0NrBThRlfMlk2rEgFnt3+wOj1",
	"jZPuXXc4GXQng9E/0/FVddyRjqzSs5YHF02HvC0d+8uBiWybAmMms4hMmErSz8yw0y2GuTzIpgvDbrde",
	"xhCmeoYHXLUInxKhm2aeSbNeDw1Ho7PBeNwdjEfDaf+sPxjA6GTUHVqzHiqZa4ltoJMout8k7VyN9RdP",
	"DFvIMb1kj6xlzmo0g7kLHpdZr1xTyeAUyygIl0k80wvcqQzEVhT3lQNIwIFO4JED9ZCTGTBDDlPuU7ZA",
	"FOyasEn4smLd+fu7qz8ulXFRMPUgv+N1e2T1Tnq9kdEfdAfGoDfrGWh4hoy+PR1Ys3G/O+2N9Y22chzx",
	"bGkJOHjIa0bTspFUlVEZ1zUqz2utdblHSalqlR/JGf8aKNlanPW9WB67wo2VUXMbKtjRWx291dFbHb3V",
	"0Vu9am8ljXVTzioy/esR7sBVxbg38FS7TbKzSPaVZSuwHjTNztLTYJ6dk+HLEm2yRB/CbsIFcISdInlf",
	"bo0Pn/4wLq5uz999uryY2JgJw1vT5kWjL7/dGRfnd+cT8BfgAs2Z15KWXiYcWOsu4op3dacIHjlFYQk3",
	"Cs1sLDAg5zqz6urgo8DGvPlTNtaKm0itnMk0C879SacT+tcFYXwyHo0GnWW/3evIFhDr9DJBTaU2J/OG",
	"leStGonFQKS3NIa9/j+M3kcVasIMSamBLAsYm2BmRiXWOmFw1JZYwQ17atf9yB/NGbI4oXkNWPFm5hCU",
	"CpaiqEDYoQfkrxf50vJzvluhXs+VO6yiWBt+X7vv83t1DT4mwdah3cDwFAio5XLIEsVnBsooKTs08OXW",
	"uHj/Qdic+/fEm+F5VlD/OP/89fyTSlxhynWNWG4z/7TuRvB363++vR++q5NVDGe909G4i4zBbDgyBqN+",
	"15ii/tgAqwez4clgaI+ndbKKRre+ZBbrbEzczq0DAyugIr+cUxL4VQsu2pH41M12TfMazexED9dujIjD",
	"FfRvrZhfbkNneP7PSSEhX2+EosG3N38Y53d3NxOhGLV8o2rgJmcmCuOffKBLzAg101NtTAf2GEeeBWaR",
	"mPiT0ZX/69Wh6x6oB04hG6kz1EGBZy3qnjfKj6bIDZv822CmIPQtnd0m46lx3/X5Q3+Mas1ECI+Pgmwt",
	"k4ABNW3E0Uaj724nPnkAKstc9Rl4dzvhiN0nwzbBuHQV6HR5lk49Uqzy6+3HSNrVTeY6lMTzxafOXjij",
	"DJKurpeD9Wq0gj2tASsrU1AZ85aYOjE2F/Kd9du903G72+6VR8eZagB+hC1PrhUArNDcmjbFyxoWMypU",
	"FgoKQ6PbM3q9u+54MjidDHtbVynXijSJ7bJsrZmu1M+XamY265MZQvEce8gxNw32a0brhYBbuZytA27h",
	"kK5qmGEBZ6pqcvsMDLH6mNqWJ0V3FnfKQyKdjQ+B1ow4p4Tcu4jeNxP8tfR7eKrv/36T2Nwh1n3dqo2E",
	"NSkgVtPKucBRHDNsb3k2CUkJM+CRg2eDbSyJE7jAJtH/m4hzJLz72rp2Obt87HnCmauC9LXcUFmVy5ub",
	"LzdKd/lqCvCcBkxEMOFuNy0huRm2EIc1B/hK+JE/0LfOCffrO+EwRi3YZLBPrNNx92SErEF3DAh6FgJr",
	"POvPZj1rNmzKuohEcscF9ARDWfXcxZ65TIioUMGyPovyW/mUlVX5eFiWrgRVZd0+t9iGi/ZJPFqrmh8C",
	"VRT1E2LXVvQ3kHJZ0V5Jw7WDLHDB47tVwjyaUk1Ej5WauLWmqjQujSyvbDV6RMo1HbRLlKeowT5RQU9e",
	"0ClKFfduxfSSpG/nAV/ckXvw/g7IlgXc7G2OuwVoVsA4cTUU8AWh+E95NaulY/F9IcfFrl9/NASYwcWc",
	"CcuRj/8XQmX79pUBvbpoDp3wJEY6No9xiSVjb0bia4BI3gkAN+ySCTAOyP1v9oDmc6BtTJJZb+XftPPr",
	"K+0OkAhfAupEgSObdDqpQYVLgecaCx1aOJovENcCBkxDWnSoIzxqryGmIU+LfJ/GiWaDSzzGKeKgzQDx",
	"gALTsKfxBWhffPDEbCftrhZdXrBitjjYgkjdIurPfRE7af12t0D3w8NDG4Wf24TOO9FY1vl09f7y8+2l",
	"0W932wvuysYAUJd9md0CXWILlIvvhDAdwXvMnTTnrlNrTbmXid5rd9vdMPzzwUM+1if6Sfinlu4jvgi1",
	"sjMPDyJ35OXCuTyRlWXyR+CahNIS+yE2W8gWkT0KkOyB5lb2emq/223shqj6RLbixmiO5udWfEtWNfuK",
	"3I4Ayl5srYaPAdPbXsalLHBdRJ/ULBTgCfM7yc2CdTKIIEtFcBV/37EEcpcqVAIoEL0XGai4nuD3ozZA",
	"llR5W1dDmgcPmTEFPkvI9M2O/XC6hqaHBGt0BbhXZpdzUKnpnV/YfpZycIArrjZehH/XULSq6ZN2dVEQ",
	"hgRKcendUwjlI4pc4GFb6nt+5qsLjcwyJEqfENIR+T5hHxMfFbq8xPnLxC2RYD6m+VHQiEFxfRKxxGrv",
	"WVZK3j63yk1PtRSypmd7EcyAW4sdSeC33JNF0ZXvxU58r7YRJfiAnaMivGpFaOl+oBD0V98hyK7jCCVk",
	"TubbyTsIpzoKvDmBl4sxZwHita16Ky8NP2/lhPsMjd5aECok4MlzqZ2lSB2r2B4BVqVeuTOuO2R6yTFd",
	"BdvzZB86+yrQkxdCB83jl5WUsrgBTjEsw+qCHR6JAltzMOPCoMWn0bUHzBcaXwCmGuKc4mnAgbUrhHYu",
	"sb7cTf4MgD4lZjPpdFRZy1Ye0QcMjs3E5FNhu3hAPbBLUMxC2Mz8dTsxOzXTZdfdFFp6Xi7K9gHsxIoY",
	"7MlyKiaehqYk4CuyFIobdvZW1c59Ku9lgvkoz8bkmb7ask9pfk7eTzrKcjtZlpWXGpWYrLTkrt4eZaau",
	"R71sC66tUjUqWFmWybL7dSbRr6yetcH+PIBB/avXQUpeNKhICiKWHrIasp1d8Andf4pwHSI9ZgjHKOSF",
	"UcimTa6U/h2bXHWaXEVb0WSbKyWOY5vrMG2uRkRw7G4crLuxXshfw0OYRzm/oXZmxur+DAhHrPMredXn",
	"ed/x2v+FJLx7is5l7UB9Uk8WHZOAvScBcZvBSC5ub980i5+lieb8KKc89s3q9M06qWefNt/g0eDN93f0",
	"NtEeSm75V5Dq5SfRwl5ZehLLarsa6YbCyuQv0ZNPR3FtWB9dSaxs3x2wOipZfSyOHro4+kIj+puURnPP",
	"51UERZKfrzQmyhoEskThNd7q0ytkiSqPrqSude1SDoqbaCoppKk9+ImVDDEZlndSj1FVlvrCOWLgEie5",
	"eqdq1wJQP7SlEIOlIP4gzjFLgVIEHXv1FGD1JiiTQrQJMsx5NZKY56nfvz2qI4NfVVm+rBpI0IrK3oot",
	"9X1SirQ35JKKT+yVWcJoaQet9mTklhM/YYZ8QsKI3yE2YBkf4muoBUKW6DKa/HIZHdU71uLWd0LyQsIW",
	"7LFxGr1eFyI99hFfVPlaCTL1zl/V3mKRTkhwLX6ZTgsY9ubhDdvVT4JpiY1tV+w/+Q5hZECB8XfEfmpM",
	"hKqf6XzO3vUW1vp5xxY59+ZnmUWOnv484FaPKVDqRu1gKNalir0LqWCo0hd/wA6H0ENEvkI4Z6oJz9su",
	"O5cQx7uJgNY8U6M6BxGjlXZ4PdbYzzSCNNpeVfiin7RsBF3UcdCuLsqwZXoSjeBMPfVYgTf3IGSz7JWv",
	"ZGh/g/a83dLk7w+0tNu/f7378uHDf5WRtHpboxFSAga0Yv3x6z4NYYtqVNHK29pXBtq/wrev/iViXHi0",
	"nMCGBEzuVEFc/qUsFbFxBUwR/K5e1KqibkEYL2NE+L5rQ1y4ul4OtOgdyNLt7DeI7XQ9ttOm0FkL5M2B",
	"aQwLv5z1yBy7oP3t6vaLNj7t9jQZG5QqejSTEc6kK3/QcIMXPevQPIUZoc0QLad6OdU/9hIabJKsx971",
	"QMn6Cr06Rqh9IiqywZVHolb82TBrj+b+XQ9EZVi7t1PRWwjreCL6DaSE8v0AZMXP/O7hDsx5iCyTHR5e",
	"m5rPTuUyD5ud/qV12Y+ffavMWVdQVa2swgtyOxRK6UN4CrEUiT90Z0tBUUYWneaF0T9KY2tpIMchki+m",
	"hTwb2/Ejt3uJGlbMPV+R8T6h4ljcbcT6pWS8QYCeDKoM0hUSrB8AJtqZwva7hu0FhldfZlgrH/X22jg6",
	"z0rmLYborEa7LbXKg3ZEVUqgvOzQbD9GXox4E3v52CV6TV2ixMlQYCSgFpjxjxUfIIq4iWi4XpHQ+MVa",
	"7JmcAuhvwLQd39ioPEBeqjXHuPOlz21UWYWonjSfU5hX5hq17myWCvE8QXC83/eK7/fVUJUke9mVrqQw",
	"HJXlTSsL9pbgcULxzgzLVQrDUVn+mjfE1wr/6Sj6t20nOEWY78pE3MnJjyrym1mHo9zfkmlYYwJ2VqRY",
	"ackxydyyuZHteal+fOv7D7ENVofav/9K/XzTpNPp9Uftbvijzc8/nv8/AAD///pHX/x7owAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
