// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	sqlmock "github.com/DATA-DOG/go-sqlmock"
	gomock "github.com/golang/mock/gomock"
	db "github.com/syunkitada/stadyapp/backends/iam/internal/domain/db"
	model "github.com/syunkitada/stadyapp/backends/iam/internal/domain/model"
)

// MockIDBCommon is a mock of IDBCommon interface.
type MockIDBCommon struct {
	ctrl     *gomock.Controller
	recorder *MockIDBCommonMockRecorder
}

// MockIDBCommonMockRecorder is the mock recorder for MockIDBCommon.
type MockIDBCommonMockRecorder struct {
	mock *MockIDBCommon
}

// NewMockIDBCommon creates a new mock instance.
func NewMockIDBCommon(ctrl *gomock.Controller) *MockIDBCommon {
	mock := &MockIDBCommon{ctrl: ctrl}
	mock.recorder = &MockIDBCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBCommon) EXPECT() *MockIDBCommonMockRecorder {
	return m.recorder
}

// MustClose mocks base method.
func (m *MockIDBCommon) MustClose(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustClose", ctx)
}

// MustClose indicates an expected call of MustClose.
func (mr *MockIDBCommonMockRecorder) MustClose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustClose", reflect.TypeOf((*MockIDBCommon)(nil).MustClose), ctx)
}

// MustCreateDatabase mocks base method.
func (m *MockIDBCommon) MustCreateDatabase(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustCreateDatabase", ctx)
}

// MustCreateDatabase indicates an expected call of MustCreateDatabase.
func (mr *MockIDBCommonMockRecorder) MustCreateDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCreateDatabase", reflect.TypeOf((*MockIDBCommon)(nil).MustCreateDatabase), ctx)
}

// MustMigrate mocks base method.
func (m *MockIDBCommon) MustMigrate(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustMigrate", ctx)
}

// MustMigrate indicates an expected call of MustMigrate.
func (mr *MockIDBCommonMockRecorder) MustMigrate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMigrate", reflect.TypeOf((*MockIDBCommon)(nil).MustMigrate), ctx)
}

// MustOpen mocks base method.
func (m *MockIDBCommon) MustOpen(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustOpen", ctx)
}

// MustOpen indicates an expected call of MustOpen.
func (mr *MockIDBCommonMockRecorder) MustOpen(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpen", reflect.TypeOf((*MockIDBCommon)(nil).MustOpen), ctx)
}

// MustOpenMock mocks base method.
func (m *MockIDBCommon) MustOpenMock(ctx context.Context) sqlmock.Sqlmock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustOpenMock", ctx)
	ret0, _ := ret[0].(sqlmock.Sqlmock)
	return ret0
}

// MustOpenMock indicates an expected call of MustOpenMock.
func (mr *MockIDBCommonMockRecorder) MustOpenMock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpenMock", reflect.TypeOf((*MockIDBCommon)(nil).MustOpenMock), ctx)
}

// MustRecreateDatabase mocks base method.
func (m *MockIDBCommon) MustRecreateDatabase(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustRecreateDatabase", ctx)
}

// MustRecreateDatabase indicates an expected call of MustRecreateDatabase.
func (mr *MockIDBCommonMockRecorder) MustRecreateDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRecreateDatabase", reflect.TypeOf((*MockIDBCommon)(nil).MustRecreateDatabase), ctx)
}

// MockIDB is a mock of IDB interface.
type MockIDB struct {
	ctrl     *gomock.Controller
	recorder *MockIDBMockRecorder
}

// MockIDBMockRecorder is the mock recorder for MockIDB.
type MockIDBMockRecorder struct {
	mock *MockIDB
}

// NewMockIDB creates a new mock instance.
func NewMockIDB(ctrl *gomock.Controller) *MockIDB {
	mock := &MockIDB{ctrl: ctrl}
	mock.recorder = &MockIDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDB) EXPECT() *MockIDBMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockIDB) CreateProject(ctx context.Context, input *db.CreateProjectInput) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, input)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockIDBMockRecorder) CreateProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockIDB)(nil).CreateProject), ctx, input)
}

// DeleteProjectByID mocks base method.
func (m *MockIDB) DeleteProjectByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectByID indicates an expected call of DeleteProjectByID.
func (mr *MockIDBMockRecorder) DeleteProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectByID", reflect.TypeOf((*MockIDB)(nil).DeleteProjectByID), ctx, id)
}

// GetProjects mocks base method.
func (m *MockIDB) GetProjects(ctx context.Context, input *db.GetProjectsInput) ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx, input)
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockIDBMockRecorder) GetProjects(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockIDB)(nil).GetProjects), ctx, input)
}

// MustClose mocks base method.
func (m *MockIDB) MustClose(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustClose", ctx)
}

// MustClose indicates an expected call of MustClose.
func (mr *MockIDBMockRecorder) MustClose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustClose", reflect.TypeOf((*MockIDB)(nil).MustClose), ctx)
}

// MustCreateDatabase mocks base method.
func (m *MockIDB) MustCreateDatabase(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustCreateDatabase", ctx)
}

// MustCreateDatabase indicates an expected call of MustCreateDatabase.
func (mr *MockIDBMockRecorder) MustCreateDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCreateDatabase", reflect.TypeOf((*MockIDB)(nil).MustCreateDatabase), ctx)
}

// MustMigrate mocks base method.
func (m *MockIDB) MustMigrate(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustMigrate", ctx)
}

// MustMigrate indicates an expected call of MustMigrate.
func (mr *MockIDBMockRecorder) MustMigrate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMigrate", reflect.TypeOf((*MockIDB)(nil).MustMigrate), ctx)
}

// MustOpen mocks base method.
func (m *MockIDB) MustOpen(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustOpen", ctx)
}

// MustOpen indicates an expected call of MustOpen.
func (mr *MockIDBMockRecorder) MustOpen(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpen", reflect.TypeOf((*MockIDB)(nil).MustOpen), ctx)
}

// MustOpenMock mocks base method.
func (m *MockIDB) MustOpenMock(ctx context.Context) sqlmock.Sqlmock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustOpenMock", ctx)
	ret0, _ := ret[0].(sqlmock.Sqlmock)
	return ret0
}

// MustOpenMock indicates an expected call of MustOpenMock.
func (mr *MockIDBMockRecorder) MustOpenMock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpenMock", reflect.TypeOf((*MockIDB)(nil).MustOpenMock), ctx)
}

// MustRecreateDatabase mocks base method.
func (m *MockIDB) MustRecreateDatabase(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustRecreateDatabase", ctx)
}

// MustRecreateDatabase indicates an expected call of MustRecreateDatabase.
func (mr *MockIDBMockRecorder) MustRecreateDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRecreateDatabase", reflect.TypeOf((*MockIDB)(nil).MustRecreateDatabase), ctx)
}

// UpdateProject mocks base method.
func (m *MockIDB) UpdateProject(ctx context.Context, input *db.UpdateProjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockIDBMockRecorder) UpdateProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockIDB)(nil).UpdateProject), ctx, input)
}

// MockIDBProject is a mock of IDBProject interface.
type MockIDBProject struct {
	ctrl     *gomock.Controller
	recorder *MockIDBProjectMockRecorder
}

// MockIDBProjectMockRecorder is the mock recorder for MockIDBProject.
type MockIDBProjectMockRecorder struct {
	mock *MockIDBProject
}

// NewMockIDBProject creates a new mock instance.
func NewMockIDBProject(ctrl *gomock.Controller) *MockIDBProject {
	mock := &MockIDBProject{ctrl: ctrl}
	mock.recorder = &MockIDBProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBProject) EXPECT() *MockIDBProjectMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockIDBProject) CreateProject(ctx context.Context, input *db.CreateProjectInput) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, input)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockIDBProjectMockRecorder) CreateProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockIDBProject)(nil).CreateProject), ctx, input)
}

// DeleteProjectByID mocks base method.
func (m *MockIDBProject) DeleteProjectByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectByID indicates an expected call of DeleteProjectByID.
func (mr *MockIDBProjectMockRecorder) DeleteProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectByID", reflect.TypeOf((*MockIDBProject)(nil).DeleteProjectByID), ctx, id)
}

// GetProjects mocks base method.
func (m *MockIDBProject) GetProjects(ctx context.Context, input *db.GetProjectsInput) ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx, input)
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockIDBProjectMockRecorder) GetProjects(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockIDBProject)(nil).GetProjects), ctx, input)
}

// UpdateProject mocks base method.
func (m *MockIDBProject) UpdateProject(ctx context.Context, input *db.UpdateProjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockIDBProjectMockRecorder) UpdateProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockIDBProject)(nil).UpdateProject), ctx, input)
}

// MockIDBRole is a mock of IDBRole interface.
type MockIDBRole struct {
	ctrl     *gomock.Controller
	recorder *MockIDBRoleMockRecorder
}

// MockIDBRoleMockRecorder is the mock recorder for MockIDBRole.
type MockIDBRoleMockRecorder struct {
	mock *MockIDBRole
}

// NewMockIDBRole creates a new mock instance.
func NewMockIDBRole(ctrl *gomock.Controller) *MockIDBRole {
	mock := &MockIDBRole{ctrl: ctrl}
	mock.recorder = &MockIDBRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBRole) EXPECT() *MockIDBRoleMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockIDBRole) CreateRole(ctx context.Context, input *db.CreateRoleInput) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, input)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockIDBRoleMockRecorder) CreateRole(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIDBRole)(nil).CreateRole), ctx, input)
}

// DeleteRoleByID mocks base method.
func (m *MockIDBRole) DeleteRoleByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleByID indicates an expected call of DeleteRoleByID.
func (mr *MockIDBRoleMockRecorder) DeleteRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleByID", reflect.TypeOf((*MockIDBRole)(nil).DeleteRoleByID), ctx, id)
}

// GetRoles mocks base method.
func (m *MockIDBRole) GetRoles(ctx context.Context, input *db.GetRolesInput) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx, input)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockIDBRoleMockRecorder) GetRoles(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockIDBRole)(nil).GetRoles), ctx, input)
}

// UpdateRole mocks base method.
func (m *MockIDBRole) UpdateRole(ctx context.Context, input *db.UpdateRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockIDBRoleMockRecorder) UpdateRole(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockIDBRole)(nil).UpdateRole), ctx, input)
}

// MockIDBUserRoleAssignment is a mock of IDBUserRoleAssignment interface.
type MockIDBUserRoleAssignment struct {
	ctrl     *gomock.Controller
	recorder *MockIDBUserRoleAssignmentMockRecorder
}

// MockIDBUserRoleAssignmentMockRecorder is the mock recorder for MockIDBUserRoleAssignment.
type MockIDBUserRoleAssignmentMockRecorder struct {
	mock *MockIDBUserRoleAssignment
}

// NewMockIDBUserRoleAssignment creates a new mock instance.
func NewMockIDBUserRoleAssignment(ctrl *gomock.Controller) *MockIDBUserRoleAssignment {
	mock := &MockIDBUserRoleAssignment{ctrl: ctrl}
	mock.recorder = &MockIDBUserRoleAssignmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBUserRoleAssignment) EXPECT() *MockIDBUserRoleAssignmentMockRecorder {
	return m.recorder
}

// CreateUserRoleAssignment mocks base method.
func (m *MockIDBUserRoleAssignment) CreateUserRoleAssignment(ctx context.Context, input *db.CreateUserRoleAssignmentInput) (*model.UserRoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRoleAssignment", ctx, input)
	ret0, _ := ret[0].(*model.UserRoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRoleAssignment indicates an expected call of CreateUserRoleAssignment.
func (mr *MockIDBUserRoleAssignmentMockRecorder) CreateUserRoleAssignment(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRoleAssignment", reflect.TypeOf((*MockIDBUserRoleAssignment)(nil).CreateUserRoleAssignment), ctx, input)
}

// DeleteUserRoleAssignment mocks base method.
func (m *MockIDBUserRoleAssignment) DeleteUserRoleAssignment(ctx context.Context, input *db.DeleteUserRoleAssignmentsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRoleAssignment", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRoleAssignment indicates an expected call of DeleteUserRoleAssignment.
func (mr *MockIDBUserRoleAssignmentMockRecorder) DeleteUserRoleAssignment(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRoleAssignment", reflect.TypeOf((*MockIDBUserRoleAssignment)(nil).DeleteUserRoleAssignment), ctx, input)
}

// GetUserRoleAssignments mocks base method.
func (m *MockIDBUserRoleAssignment) GetUserRoleAssignments(ctx context.Context, input *db.GetUserRoleAssignmentsInput) ([]model.UserRoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.UserRoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleAssignments indicates an expected call of GetUserRoleAssignments.
func (mr *MockIDBUserRoleAssignmentMockRecorder) GetUserRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleAssignments", reflect.TypeOf((*MockIDBUserRoleAssignment)(nil).GetUserRoleAssignments), ctx, input)
}
