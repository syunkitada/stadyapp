// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	sqlmock "github.com/DATA-DOG/go-sqlmock"
	gomock "github.com/golang/mock/gomock"
	db "github.com/syunkitada/stadyapp/backends/iam/internal/domain/db"
	model "github.com/syunkitada/stadyapp/backends/iam/internal/domain/model"
)

// MockIDBCommon is a mock of IDBCommon interface.
type MockIDBCommon struct {
	ctrl     *gomock.Controller
	recorder *MockIDBCommonMockRecorder
}

// MockIDBCommonMockRecorder is the mock recorder for MockIDBCommon.
type MockIDBCommonMockRecorder struct {
	mock *MockIDBCommon
}

// NewMockIDBCommon creates a new mock instance.
func NewMockIDBCommon(ctrl *gomock.Controller) *MockIDBCommon {
	mock := &MockIDBCommon{ctrl: ctrl}
	mock.recorder = &MockIDBCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBCommon) EXPECT() *MockIDBCommonMockRecorder {
	return m.recorder
}

// MustClose mocks base method.
func (m *MockIDBCommon) MustClose(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustClose", ctx)
}

// MustClose indicates an expected call of MustClose.
func (mr *MockIDBCommonMockRecorder) MustClose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustClose", reflect.TypeOf((*MockIDBCommon)(nil).MustClose), ctx)
}

// MustCreateDatabase mocks base method.
func (m *MockIDBCommon) MustCreateDatabase(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustCreateDatabase", ctx)
}

// MustCreateDatabase indicates an expected call of MustCreateDatabase.
func (mr *MockIDBCommonMockRecorder) MustCreateDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCreateDatabase", reflect.TypeOf((*MockIDBCommon)(nil).MustCreateDatabase), ctx)
}

// MustMigrate mocks base method.
func (m *MockIDBCommon) MustMigrate(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustMigrate", ctx)
}

// MustMigrate indicates an expected call of MustMigrate.
func (mr *MockIDBCommonMockRecorder) MustMigrate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMigrate", reflect.TypeOf((*MockIDBCommon)(nil).MustMigrate), ctx)
}

// MustOpen mocks base method.
func (m *MockIDBCommon) MustOpen(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustOpen", ctx)
}

// MustOpen indicates an expected call of MustOpen.
func (mr *MockIDBCommonMockRecorder) MustOpen(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpen", reflect.TypeOf((*MockIDBCommon)(nil).MustOpen), ctx)
}

// MustOpenMock mocks base method.
func (m *MockIDBCommon) MustOpenMock(ctx context.Context) sqlmock.Sqlmock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustOpenMock", ctx)
	ret0, _ := ret[0].(sqlmock.Sqlmock)
	return ret0
}

// MustOpenMock indicates an expected call of MustOpenMock.
func (mr *MockIDBCommonMockRecorder) MustOpenMock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpenMock", reflect.TypeOf((*MockIDBCommon)(nil).MustOpenMock), ctx)
}

// MustRecreateDatabase mocks base method.
func (m *MockIDBCommon) MustRecreateDatabase(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustRecreateDatabase", ctx)
}

// MustRecreateDatabase indicates an expected call of MustRecreateDatabase.
func (mr *MockIDBCommonMockRecorder) MustRecreateDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRecreateDatabase", reflect.TypeOf((*MockIDBCommon)(nil).MustRecreateDatabase), ctx)
}

// MockIDB is a mock of IDB interface.
type MockIDB struct {
	ctrl     *gomock.Controller
	recorder *MockIDBMockRecorder
}

// MockIDBMockRecorder is the mock recorder for MockIDB.
type MockIDBMockRecorder struct {
	mock *MockIDB
}

// NewMockIDB creates a new mock instance.
func NewMockIDB(ctrl *gomock.Controller) *MockIDB {
	mock := &MockIDB{ctrl: ctrl}
	mock.recorder = &MockIDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDB) EXPECT() *MockIDBMockRecorder {
	return m.recorder
}

// AssignRoleToTeamDomain mocks base method.
func (m *MockIDB) AssignRoleToTeamDomain(ctx context.Context, roleID, teamID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToTeamDomain", ctx, roleID, teamID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToTeamDomain indicates an expected call of AssignRoleToTeamDomain.
func (mr *MockIDBMockRecorder) AssignRoleToTeamDomain(ctx, roleID, teamID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToTeamDomain", reflect.TypeOf((*MockIDB)(nil).AssignRoleToTeamDomain), ctx, roleID, teamID, domainID)
}

// AssignRoleToTeamOrganization mocks base method.
func (m *MockIDB) AssignRoleToTeamOrganization(ctx context.Context, roleID, teamID, organizationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToTeamOrganization", ctx, roleID, teamID, organizationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToTeamOrganization indicates an expected call of AssignRoleToTeamOrganization.
func (mr *MockIDBMockRecorder) AssignRoleToTeamOrganization(ctx, roleID, teamID, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToTeamOrganization", reflect.TypeOf((*MockIDB)(nil).AssignRoleToTeamOrganization), ctx, roleID, teamID, organizationID)
}

// AssignRoleToTeamProject mocks base method.
func (m *MockIDB) AssignRoleToTeamProject(ctx context.Context, roleID, teamID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToTeamProject", ctx, roleID, teamID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToTeamProject indicates an expected call of AssignRoleToTeamProject.
func (mr *MockIDBMockRecorder) AssignRoleToTeamProject(ctx, roleID, teamID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToTeamProject", reflect.TypeOf((*MockIDB)(nil).AssignRoleToTeamProject), ctx, roleID, teamID, projectID)
}

// AssignRoleToUserDomain mocks base method.
func (m *MockIDB) AssignRoleToUserDomain(ctx context.Context, roleID, userID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUserDomain", ctx, roleID, userID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUserDomain indicates an expected call of AssignRoleToUserDomain.
func (mr *MockIDBMockRecorder) AssignRoleToUserDomain(ctx, roleID, userID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUserDomain", reflect.TypeOf((*MockIDB)(nil).AssignRoleToUserDomain), ctx, roleID, userID, domainID)
}

// AssignRoleToUserOrganization mocks base method.
func (m *MockIDB) AssignRoleToUserOrganization(ctx context.Context, roleID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUserOrganization", ctx, roleID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUserOrganization indicates an expected call of AssignRoleToUserOrganization.
func (mr *MockIDBMockRecorder) AssignRoleToUserOrganization(ctx, roleID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUserOrganization", reflect.TypeOf((*MockIDB)(nil).AssignRoleToUserOrganization), ctx, roleID, userID, teamID)
}

// AssignRoleToUserProject mocks base method.
func (m *MockIDB) AssignRoleToUserProject(ctx context.Context, roleID, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUserProject", ctx, roleID, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUserProject indicates an expected call of AssignRoleToUserProject.
func (mr *MockIDBMockRecorder) AssignRoleToUserProject(ctx, roleID, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUserProject", reflect.TypeOf((*MockIDB)(nil).AssignRoleToUserProject), ctx, roleID, userID, projectID)
}

// AssignRoleToUserTeam mocks base method.
func (m *MockIDB) AssignRoleToUserTeam(ctx context.Context, roleID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUserTeam", ctx, roleID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUserTeam indicates an expected call of AssignRoleToUserTeam.
func (mr *MockIDBMockRecorder) AssignRoleToUserTeam(ctx, roleID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUserTeam", reflect.TypeOf((*MockIDB)(nil).AssignRoleToUserTeam), ctx, roleID, userID, teamID)
}

// CreateDomain mocks base method.
func (m *MockIDB) CreateDomain(ctx context.Context, input *db.CreateDomainInput) (*model.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", ctx, input)
	ret0, _ := ret[0].(*model.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockIDBMockRecorder) CreateDomain(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockIDB)(nil).CreateDomain), ctx, input)
}

// CreateOrganization mocks base method.
func (m *MockIDB) CreateOrganization(ctx context.Context, input *db.CreateOrganizationInput) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, input)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockIDBMockRecorder) CreateOrganization(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockIDB)(nil).CreateOrganization), ctx, input)
}

// CreateProject mocks base method.
func (m *MockIDB) CreateProject(ctx context.Context, input *db.CreateProjectInput) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, input)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockIDBMockRecorder) CreateProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockIDB)(nil).CreateProject), ctx, input)
}

// CreateRole mocks base method.
func (m *MockIDB) CreateRole(ctx context.Context, input *db.CreateRoleInput) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, input)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockIDBMockRecorder) CreateRole(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIDB)(nil).CreateRole), ctx, input)
}

// CreateTeam mocks base method.
func (m *MockIDB) CreateTeam(ctx context.Context, input *db.CreateTeamInput) (*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, input)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockIDBMockRecorder) CreateTeam(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockIDB)(nil).CreateTeam), ctx, input)
}

// CreateUser mocks base method.
func (m *MockIDB) CreateUser(ctx context.Context, input *db.CreateUserInput) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIDBMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIDB)(nil).CreateUser), ctx, input)
}

// DeleteDomainByID mocks base method.
func (m *MockIDB) DeleteDomainByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainByID indicates an expected call of DeleteDomainByID.
func (mr *MockIDBMockRecorder) DeleteDomainByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainByID", reflect.TypeOf((*MockIDB)(nil).DeleteDomainByID), ctx, id)
}

// DeleteOrganizationByID mocks base method.
func (m *MockIDB) DeleteOrganizationByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganizationByID indicates an expected call of DeleteOrganizationByID.
func (mr *MockIDBMockRecorder) DeleteOrganizationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationByID", reflect.TypeOf((*MockIDB)(nil).DeleteOrganizationByID), ctx, id)
}

// DeleteProjectByID mocks base method.
func (m *MockIDB) DeleteProjectByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectByID indicates an expected call of DeleteProjectByID.
func (mr *MockIDBMockRecorder) DeleteProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectByID", reflect.TypeOf((*MockIDB)(nil).DeleteProjectByID), ctx, id)
}

// DeleteRoleByID mocks base method.
func (m *MockIDB) DeleteRoleByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleByID indicates an expected call of DeleteRoleByID.
func (mr *MockIDBMockRecorder) DeleteRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleByID", reflect.TypeOf((*MockIDB)(nil).DeleteRoleByID), ctx, id)
}

// DeleteTeamByID mocks base method.
func (m *MockIDB) DeleteTeamByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamByID indicates an expected call of DeleteTeamByID.
func (mr *MockIDBMockRecorder) DeleteTeamByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamByID", reflect.TypeOf((*MockIDB)(nil).DeleteTeamByID), ctx, id)
}

// DeleteUserByID mocks base method.
func (m *MockIDB) DeleteUserByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockIDBMockRecorder) DeleteUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockIDB)(nil).DeleteUserByID), ctx, id)
}

// GetDomain mocks base method.
func (m *MockIDB) GetDomain(ctx context.Context, input *db.GetDomainsInput) (*model.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", ctx, input)
	ret0, _ := ret[0].(*model.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockIDBMockRecorder) GetDomain(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockIDB)(nil).GetDomain), ctx, input)
}

// GetDomainRoleAssignments mocks base method.
func (m *MockIDB) GetDomainRoleAssignments(ctx context.Context, input *db.GetDomainRoleAssignmentsInput) ([]model.DomainRoleAssignmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.DomainRoleAssignmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainRoleAssignments indicates an expected call of GetDomainRoleAssignments.
func (mr *MockIDBMockRecorder) GetDomainRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRoleAssignments", reflect.TypeOf((*MockIDB)(nil).GetDomainRoleAssignments), ctx, input)
}

// GetDomains mocks base method.
func (m *MockIDB) GetDomains(ctx context.Context, input *db.GetDomainsInput) ([]model.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomains", ctx, input)
	ret0, _ := ret[0].([]model.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomains indicates an expected call of GetDomains.
func (mr *MockIDBMockRecorder) GetDomains(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomains", reflect.TypeOf((*MockIDB)(nil).GetDomains), ctx, input)
}

// GetOrganization mocks base method.
func (m *MockIDB) GetOrganization(ctx context.Context, input *db.GetOrganizationsInput) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, input)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockIDBMockRecorder) GetOrganization(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockIDB)(nil).GetOrganization), ctx, input)
}

// GetOrganizationRoleAssignments mocks base method.
func (m *MockIDB) GetOrganizationRoleAssignments(ctx context.Context, input *db.GetOrganizationRoleAssignmentsInput) ([]model.OrganizationRoleAssignmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.OrganizationRoleAssignmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationRoleAssignments indicates an expected call of GetOrganizationRoleAssignments.
func (mr *MockIDBMockRecorder) GetOrganizationRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRoleAssignments", reflect.TypeOf((*MockIDB)(nil).GetOrganizationRoleAssignments), ctx, input)
}

// GetOrganizations mocks base method.
func (m *MockIDB) GetOrganizations(ctx context.Context, input *db.GetOrganizationsInput) ([]model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations", ctx, input)
	ret0, _ := ret[0].([]model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockIDBMockRecorder) GetOrganizations(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockIDB)(nil).GetOrganizations), ctx, input)
}

// GetProject mocks base method.
func (m *MockIDB) GetProject(ctx context.Context, input *db.GetProjectsInput) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, input)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockIDBMockRecorder) GetProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockIDB)(nil).GetProject), ctx, input)
}

// GetProjectRoleAssignments mocks base method.
func (m *MockIDB) GetProjectRoleAssignments(ctx context.Context, input *db.GetProjectRoleAssignmentsInput) ([]model.ProjectRoleAssignmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.ProjectRoleAssignmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectRoleAssignments indicates an expected call of GetProjectRoleAssignments.
func (mr *MockIDBMockRecorder) GetProjectRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRoleAssignments", reflect.TypeOf((*MockIDB)(nil).GetProjectRoleAssignments), ctx, input)
}

// GetProjects mocks base method.
func (m *MockIDB) GetProjects(ctx context.Context, input *db.GetProjectsInput) ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx, input)
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockIDBMockRecorder) GetProjects(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockIDB)(nil).GetProjects), ctx, input)
}

// GetRoleByID mocks base method.
func (m *MockIDB) GetRoleByID(ctx context.Context, id string) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", ctx, id)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockIDBMockRecorder) GetRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockIDB)(nil).GetRoleByID), ctx, id)
}

// GetRoles mocks base method.
func (m *MockIDB) GetRoles(ctx context.Context, input *db.GetRolesInput) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx, input)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockIDBMockRecorder) GetRoles(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockIDB)(nil).GetRoles), ctx, input)
}

// GetTeam mocks base method.
func (m *MockIDB) GetTeam(ctx context.Context, input *db.GetTeamsInput) (*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, input)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockIDBMockRecorder) GetTeam(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockIDB)(nil).GetTeam), ctx, input)
}

// GetTeamRoleAssignments mocks base method.
func (m *MockIDB) GetTeamRoleAssignments(ctx context.Context, input *db.GetTeamRoleAssignmentsInput) ([]model.TeamRoleAssignmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.TeamRoleAssignmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamRoleAssignments indicates an expected call of GetTeamRoleAssignments.
func (mr *MockIDBMockRecorder) GetTeamRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamRoleAssignments", reflect.TypeOf((*MockIDB)(nil).GetTeamRoleAssignments), ctx, input)
}

// GetTeams mocks base method.
func (m *MockIDB) GetTeams(ctx context.Context, input *db.GetTeamsInput) ([]model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx, input)
	ret0, _ := ret[0].([]model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockIDBMockRecorder) GetTeams(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockIDB)(nil).GetTeams), ctx, input)
}

// GetUser mocks base method.
func (m *MockIDB) GetUser(ctx context.Context, input *db.GetUsersInput) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, input)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIDBMockRecorder) GetUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIDB)(nil).GetUser), ctx, input)
}

// GetUsers mocks base method.
func (m *MockIDB) GetUsers(ctx context.Context, input *db.GetUsersInput) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, input)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIDBMockRecorder) GetUsers(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIDB)(nil).GetUsers), ctx, input)
}

// MustClose mocks base method.
func (m *MockIDB) MustClose(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustClose", ctx)
}

// MustClose indicates an expected call of MustClose.
func (mr *MockIDBMockRecorder) MustClose(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustClose", reflect.TypeOf((*MockIDB)(nil).MustClose), ctx)
}

// MustCreateDatabase mocks base method.
func (m *MockIDB) MustCreateDatabase(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustCreateDatabase", ctx)
}

// MustCreateDatabase indicates an expected call of MustCreateDatabase.
func (mr *MockIDBMockRecorder) MustCreateDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCreateDatabase", reflect.TypeOf((*MockIDB)(nil).MustCreateDatabase), ctx)
}

// MustMigrate mocks base method.
func (m *MockIDB) MustMigrate(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustMigrate", ctx)
}

// MustMigrate indicates an expected call of MustMigrate.
func (mr *MockIDBMockRecorder) MustMigrate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMigrate", reflect.TypeOf((*MockIDB)(nil).MustMigrate), ctx)
}

// MustOpen mocks base method.
func (m *MockIDB) MustOpen(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustOpen", ctx)
}

// MustOpen indicates an expected call of MustOpen.
func (mr *MockIDBMockRecorder) MustOpen(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpen", reflect.TypeOf((*MockIDB)(nil).MustOpen), ctx)
}

// MustOpenMock mocks base method.
func (m *MockIDB) MustOpenMock(ctx context.Context) sqlmock.Sqlmock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustOpenMock", ctx)
	ret0, _ := ret[0].(sqlmock.Sqlmock)
	return ret0
}

// MustOpenMock indicates an expected call of MustOpenMock.
func (mr *MockIDBMockRecorder) MustOpenMock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpenMock", reflect.TypeOf((*MockIDB)(nil).MustOpenMock), ctx)
}

// MustRecreateDatabase mocks base method.
func (m *MockIDB) MustRecreateDatabase(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustRecreateDatabase", ctx)
}

// MustRecreateDatabase indicates an expected call of MustRecreateDatabase.
func (mr *MockIDBMockRecorder) MustRecreateDatabase(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRecreateDatabase", reflect.TypeOf((*MockIDB)(nil).MustRecreateDatabase), ctx)
}

// UnassignRoleFromTeamDomain mocks base method.
func (m *MockIDB) UnassignRoleFromTeamDomain(ctx context.Context, roleID, teamID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromTeamDomain", ctx, roleID, teamID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromTeamDomain indicates an expected call of UnassignRoleFromTeamDomain.
func (mr *MockIDBMockRecorder) UnassignRoleFromTeamDomain(ctx, roleID, teamID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromTeamDomain", reflect.TypeOf((*MockIDB)(nil).UnassignRoleFromTeamDomain), ctx, roleID, teamID, domainID)
}

// UnassignRoleFromTeamOrganization mocks base method.
func (m *MockIDB) UnassignRoleFromTeamOrganization(ctx context.Context, roleID, teamID, organizationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromTeamOrganization", ctx, roleID, teamID, organizationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromTeamOrganization indicates an expected call of UnassignRoleFromTeamOrganization.
func (mr *MockIDBMockRecorder) UnassignRoleFromTeamOrganization(ctx, roleID, teamID, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromTeamOrganization", reflect.TypeOf((*MockIDB)(nil).UnassignRoleFromTeamOrganization), ctx, roleID, teamID, organizationID)
}

// UnassignRoleFromTeamProject mocks base method.
func (m *MockIDB) UnassignRoleFromTeamProject(ctx context.Context, roleID, teamID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromTeamProject", ctx, roleID, teamID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromTeamProject indicates an expected call of UnassignRoleFromTeamProject.
func (mr *MockIDBMockRecorder) UnassignRoleFromTeamProject(ctx, roleID, teamID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromTeamProject", reflect.TypeOf((*MockIDB)(nil).UnassignRoleFromTeamProject), ctx, roleID, teamID, projectID)
}

// UnassignRoleFromUserDomain mocks base method.
func (m *MockIDB) UnassignRoleFromUserDomain(ctx context.Context, roleID, userID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromUserDomain", ctx, roleID, userID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromUserDomain indicates an expected call of UnassignRoleFromUserDomain.
func (mr *MockIDBMockRecorder) UnassignRoleFromUserDomain(ctx, roleID, userID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromUserDomain", reflect.TypeOf((*MockIDB)(nil).UnassignRoleFromUserDomain), ctx, roleID, userID, domainID)
}

// UnassignRoleFromUserOrganization mocks base method.
func (m *MockIDB) UnassignRoleFromUserOrganization(ctx context.Context, roleID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromUserOrganization", ctx, roleID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromUserOrganization indicates an expected call of UnassignRoleFromUserOrganization.
func (mr *MockIDBMockRecorder) UnassignRoleFromUserOrganization(ctx, roleID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromUserOrganization", reflect.TypeOf((*MockIDB)(nil).UnassignRoleFromUserOrganization), ctx, roleID, userID, teamID)
}

// UnassignRoleFromUserProject mocks base method.
func (m *MockIDB) UnassignRoleFromUserProject(ctx context.Context, roleID, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromUserProject", ctx, roleID, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromUserProject indicates an expected call of UnassignRoleFromUserProject.
func (mr *MockIDBMockRecorder) UnassignRoleFromUserProject(ctx, roleID, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromUserProject", reflect.TypeOf((*MockIDB)(nil).UnassignRoleFromUserProject), ctx, roleID, userID, projectID)
}

// UnassignRoleFromUserTeam mocks base method.
func (m *MockIDB) UnassignRoleFromUserTeam(ctx context.Context, roleID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromUserTeam", ctx, roleID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromUserTeam indicates an expected call of UnassignRoleFromUserTeam.
func (mr *MockIDBMockRecorder) UnassignRoleFromUserTeam(ctx, roleID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromUserTeam", reflect.TypeOf((*MockIDB)(nil).UnassignRoleFromUserTeam), ctx, roleID, userID, teamID)
}

// UpdateDomainByID mocks base method.
func (m *MockIDB) UpdateDomainByID(ctx context.Context, id string, input *db.UpdateDomainByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDomainByID indicates an expected call of UpdateDomainByID.
func (mr *MockIDBMockRecorder) UpdateDomainByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainByID", reflect.TypeOf((*MockIDB)(nil).UpdateDomainByID), ctx, id, input)
}

// UpdateOrganizationByID mocks base method.
func (m *MockIDB) UpdateOrganizationByID(ctx context.Context, id string, input *db.UpdateOrganizationByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganizationByID indicates an expected call of UpdateOrganizationByID.
func (mr *MockIDBMockRecorder) UpdateOrganizationByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationByID", reflect.TypeOf((*MockIDB)(nil).UpdateOrganizationByID), ctx, id, input)
}

// UpdateProjectByID mocks base method.
func (m *MockIDB) UpdateProjectByID(ctx context.Context, id string, input *db.UpdateProjectByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectByID indicates an expected call of UpdateProjectByID.
func (mr *MockIDBMockRecorder) UpdateProjectByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectByID", reflect.TypeOf((*MockIDB)(nil).UpdateProjectByID), ctx, id, input)
}

// UpdateRoleByID mocks base method.
func (m *MockIDB) UpdateRoleByID(ctx context.Context, id string, input *db.UpdateRoleByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleByID indicates an expected call of UpdateRoleByID.
func (mr *MockIDBMockRecorder) UpdateRoleByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleByID", reflect.TypeOf((*MockIDB)(nil).UpdateRoleByID), ctx, id, input)
}

// UpdateTeamByID mocks base method.
func (m *MockIDB) UpdateTeamByID(ctx context.Context, id string, input *db.UpdateTeamByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeamByID indicates an expected call of UpdateTeamByID.
func (mr *MockIDBMockRecorder) UpdateTeamByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamByID", reflect.TypeOf((*MockIDB)(nil).UpdateTeamByID), ctx, id, input)
}

// UpdateUserByID mocks base method.
func (m *MockIDB) UpdateUserByID(ctx context.Context, id string, input *db.UpdateUserByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockIDBMockRecorder) UpdateUserByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockIDB)(nil).UpdateUserByID), ctx, id, input)
}

// MockIDBDomain is a mock of IDBDomain interface.
type MockIDBDomain struct {
	ctrl     *gomock.Controller
	recorder *MockIDBDomainMockRecorder
}

// MockIDBDomainMockRecorder is the mock recorder for MockIDBDomain.
type MockIDBDomainMockRecorder struct {
	mock *MockIDBDomain
}

// NewMockIDBDomain creates a new mock instance.
func NewMockIDBDomain(ctrl *gomock.Controller) *MockIDBDomain {
	mock := &MockIDBDomain{ctrl: ctrl}
	mock.recorder = &MockIDBDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBDomain) EXPECT() *MockIDBDomainMockRecorder {
	return m.recorder
}

// CreateDomain mocks base method.
func (m *MockIDBDomain) CreateDomain(ctx context.Context, input *db.CreateDomainInput) (*model.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", ctx, input)
	ret0, _ := ret[0].(*model.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockIDBDomainMockRecorder) CreateDomain(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockIDBDomain)(nil).CreateDomain), ctx, input)
}

// DeleteDomainByID mocks base method.
func (m *MockIDBDomain) DeleteDomainByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomainByID indicates an expected call of DeleteDomainByID.
func (mr *MockIDBDomainMockRecorder) DeleteDomainByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainByID", reflect.TypeOf((*MockIDBDomain)(nil).DeleteDomainByID), ctx, id)
}

// GetDomain mocks base method.
func (m *MockIDBDomain) GetDomain(ctx context.Context, input *db.GetDomainsInput) (*model.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", ctx, input)
	ret0, _ := ret[0].(*model.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockIDBDomainMockRecorder) GetDomain(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockIDBDomain)(nil).GetDomain), ctx, input)
}

// GetDomains mocks base method.
func (m *MockIDBDomain) GetDomains(ctx context.Context, input *db.GetDomainsInput) ([]model.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomains", ctx, input)
	ret0, _ := ret[0].([]model.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomains indicates an expected call of GetDomains.
func (mr *MockIDBDomainMockRecorder) GetDomains(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomains", reflect.TypeOf((*MockIDBDomain)(nil).GetDomains), ctx, input)
}

// UpdateDomainByID mocks base method.
func (m *MockIDBDomain) UpdateDomainByID(ctx context.Context, id string, input *db.UpdateDomainByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDomainByID indicates an expected call of UpdateDomainByID.
func (mr *MockIDBDomainMockRecorder) UpdateDomainByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainByID", reflect.TypeOf((*MockIDBDomain)(nil).UpdateDomainByID), ctx, id, input)
}

// MockIDBRole is a mock of IDBRole interface.
type MockIDBRole struct {
	ctrl     *gomock.Controller
	recorder *MockIDBRoleMockRecorder
}

// MockIDBRoleMockRecorder is the mock recorder for MockIDBRole.
type MockIDBRoleMockRecorder struct {
	mock *MockIDBRole
}

// NewMockIDBRole creates a new mock instance.
func NewMockIDBRole(ctrl *gomock.Controller) *MockIDBRole {
	mock := &MockIDBRole{ctrl: ctrl}
	mock.recorder = &MockIDBRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBRole) EXPECT() *MockIDBRoleMockRecorder {
	return m.recorder
}

// AssignRoleToTeamDomain mocks base method.
func (m *MockIDBRole) AssignRoleToTeamDomain(ctx context.Context, roleID, teamID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToTeamDomain", ctx, roleID, teamID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToTeamDomain indicates an expected call of AssignRoleToTeamDomain.
func (mr *MockIDBRoleMockRecorder) AssignRoleToTeamDomain(ctx, roleID, teamID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToTeamDomain", reflect.TypeOf((*MockIDBRole)(nil).AssignRoleToTeamDomain), ctx, roleID, teamID, domainID)
}

// AssignRoleToTeamOrganization mocks base method.
func (m *MockIDBRole) AssignRoleToTeamOrganization(ctx context.Context, roleID, teamID, organizationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToTeamOrganization", ctx, roleID, teamID, organizationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToTeamOrganization indicates an expected call of AssignRoleToTeamOrganization.
func (mr *MockIDBRoleMockRecorder) AssignRoleToTeamOrganization(ctx, roleID, teamID, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToTeamOrganization", reflect.TypeOf((*MockIDBRole)(nil).AssignRoleToTeamOrganization), ctx, roleID, teamID, organizationID)
}

// AssignRoleToTeamProject mocks base method.
func (m *MockIDBRole) AssignRoleToTeamProject(ctx context.Context, roleID, teamID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToTeamProject", ctx, roleID, teamID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToTeamProject indicates an expected call of AssignRoleToTeamProject.
func (mr *MockIDBRoleMockRecorder) AssignRoleToTeamProject(ctx, roleID, teamID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToTeamProject", reflect.TypeOf((*MockIDBRole)(nil).AssignRoleToTeamProject), ctx, roleID, teamID, projectID)
}

// AssignRoleToUserDomain mocks base method.
func (m *MockIDBRole) AssignRoleToUserDomain(ctx context.Context, roleID, userID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUserDomain", ctx, roleID, userID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUserDomain indicates an expected call of AssignRoleToUserDomain.
func (mr *MockIDBRoleMockRecorder) AssignRoleToUserDomain(ctx, roleID, userID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUserDomain", reflect.TypeOf((*MockIDBRole)(nil).AssignRoleToUserDomain), ctx, roleID, userID, domainID)
}

// AssignRoleToUserOrganization mocks base method.
func (m *MockIDBRole) AssignRoleToUserOrganization(ctx context.Context, roleID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUserOrganization", ctx, roleID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUserOrganization indicates an expected call of AssignRoleToUserOrganization.
func (mr *MockIDBRoleMockRecorder) AssignRoleToUserOrganization(ctx, roleID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUserOrganization", reflect.TypeOf((*MockIDBRole)(nil).AssignRoleToUserOrganization), ctx, roleID, userID, teamID)
}

// AssignRoleToUserProject mocks base method.
func (m *MockIDBRole) AssignRoleToUserProject(ctx context.Context, roleID, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUserProject", ctx, roleID, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUserProject indicates an expected call of AssignRoleToUserProject.
func (mr *MockIDBRoleMockRecorder) AssignRoleToUserProject(ctx, roleID, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUserProject", reflect.TypeOf((*MockIDBRole)(nil).AssignRoleToUserProject), ctx, roleID, userID, projectID)
}

// AssignRoleToUserTeam mocks base method.
func (m *MockIDBRole) AssignRoleToUserTeam(ctx context.Context, roleID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUserTeam", ctx, roleID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUserTeam indicates an expected call of AssignRoleToUserTeam.
func (mr *MockIDBRoleMockRecorder) AssignRoleToUserTeam(ctx, roleID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUserTeam", reflect.TypeOf((*MockIDBRole)(nil).AssignRoleToUserTeam), ctx, roleID, userID, teamID)
}

// CreateRole mocks base method.
func (m *MockIDBRole) CreateRole(ctx context.Context, input *db.CreateRoleInput) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, input)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockIDBRoleMockRecorder) CreateRole(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIDBRole)(nil).CreateRole), ctx, input)
}

// DeleteRoleByID mocks base method.
func (m *MockIDBRole) DeleteRoleByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleByID indicates an expected call of DeleteRoleByID.
func (mr *MockIDBRoleMockRecorder) DeleteRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleByID", reflect.TypeOf((*MockIDBRole)(nil).DeleteRoleByID), ctx, id)
}

// GetDomainRoleAssignments mocks base method.
func (m *MockIDBRole) GetDomainRoleAssignments(ctx context.Context, input *db.GetDomainRoleAssignmentsInput) ([]model.DomainRoleAssignmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.DomainRoleAssignmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainRoleAssignments indicates an expected call of GetDomainRoleAssignments.
func (mr *MockIDBRoleMockRecorder) GetDomainRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainRoleAssignments", reflect.TypeOf((*MockIDBRole)(nil).GetDomainRoleAssignments), ctx, input)
}

// GetOrganizationRoleAssignments mocks base method.
func (m *MockIDBRole) GetOrganizationRoleAssignments(ctx context.Context, input *db.GetOrganizationRoleAssignmentsInput) ([]model.OrganizationRoleAssignmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.OrganizationRoleAssignmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationRoleAssignments indicates an expected call of GetOrganizationRoleAssignments.
func (mr *MockIDBRoleMockRecorder) GetOrganizationRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRoleAssignments", reflect.TypeOf((*MockIDBRole)(nil).GetOrganizationRoleAssignments), ctx, input)
}

// GetProjectRoleAssignments mocks base method.
func (m *MockIDBRole) GetProjectRoleAssignments(ctx context.Context, input *db.GetProjectRoleAssignmentsInput) ([]model.ProjectRoleAssignmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.ProjectRoleAssignmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectRoleAssignments indicates an expected call of GetProjectRoleAssignments.
func (mr *MockIDBRoleMockRecorder) GetProjectRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRoleAssignments", reflect.TypeOf((*MockIDBRole)(nil).GetProjectRoleAssignments), ctx, input)
}

// GetRoleByID mocks base method.
func (m *MockIDBRole) GetRoleByID(ctx context.Context, id string) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", ctx, id)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockIDBRoleMockRecorder) GetRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockIDBRole)(nil).GetRoleByID), ctx, id)
}

// GetRoles mocks base method.
func (m *MockIDBRole) GetRoles(ctx context.Context, input *db.GetRolesInput) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx, input)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockIDBRoleMockRecorder) GetRoles(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockIDBRole)(nil).GetRoles), ctx, input)
}

// GetTeamRoleAssignments mocks base method.
func (m *MockIDBRole) GetTeamRoleAssignments(ctx context.Context, input *db.GetTeamRoleAssignmentsInput) ([]model.TeamRoleAssignmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]model.TeamRoleAssignmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamRoleAssignments indicates an expected call of GetTeamRoleAssignments.
func (mr *MockIDBRoleMockRecorder) GetTeamRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamRoleAssignments", reflect.TypeOf((*MockIDBRole)(nil).GetTeamRoleAssignments), ctx, input)
}

// UnassignRoleFromTeamDomain mocks base method.
func (m *MockIDBRole) UnassignRoleFromTeamDomain(ctx context.Context, roleID, teamID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromTeamDomain", ctx, roleID, teamID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromTeamDomain indicates an expected call of UnassignRoleFromTeamDomain.
func (mr *MockIDBRoleMockRecorder) UnassignRoleFromTeamDomain(ctx, roleID, teamID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromTeamDomain", reflect.TypeOf((*MockIDBRole)(nil).UnassignRoleFromTeamDomain), ctx, roleID, teamID, domainID)
}

// UnassignRoleFromTeamOrganization mocks base method.
func (m *MockIDBRole) UnassignRoleFromTeamOrganization(ctx context.Context, roleID, teamID, organizationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromTeamOrganization", ctx, roleID, teamID, organizationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromTeamOrganization indicates an expected call of UnassignRoleFromTeamOrganization.
func (mr *MockIDBRoleMockRecorder) UnassignRoleFromTeamOrganization(ctx, roleID, teamID, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromTeamOrganization", reflect.TypeOf((*MockIDBRole)(nil).UnassignRoleFromTeamOrganization), ctx, roleID, teamID, organizationID)
}

// UnassignRoleFromTeamProject mocks base method.
func (m *MockIDBRole) UnassignRoleFromTeamProject(ctx context.Context, roleID, teamID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromTeamProject", ctx, roleID, teamID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromTeamProject indicates an expected call of UnassignRoleFromTeamProject.
func (mr *MockIDBRoleMockRecorder) UnassignRoleFromTeamProject(ctx, roleID, teamID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromTeamProject", reflect.TypeOf((*MockIDBRole)(nil).UnassignRoleFromTeamProject), ctx, roleID, teamID, projectID)
}

// UnassignRoleFromUserDomain mocks base method.
func (m *MockIDBRole) UnassignRoleFromUserDomain(ctx context.Context, roleID, userID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromUserDomain", ctx, roleID, userID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromUserDomain indicates an expected call of UnassignRoleFromUserDomain.
func (mr *MockIDBRoleMockRecorder) UnassignRoleFromUserDomain(ctx, roleID, userID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromUserDomain", reflect.TypeOf((*MockIDBRole)(nil).UnassignRoleFromUserDomain), ctx, roleID, userID, domainID)
}

// UnassignRoleFromUserOrganization mocks base method.
func (m *MockIDBRole) UnassignRoleFromUserOrganization(ctx context.Context, roleID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromUserOrganization", ctx, roleID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromUserOrganization indicates an expected call of UnassignRoleFromUserOrganization.
func (mr *MockIDBRoleMockRecorder) UnassignRoleFromUserOrganization(ctx, roleID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromUserOrganization", reflect.TypeOf((*MockIDBRole)(nil).UnassignRoleFromUserOrganization), ctx, roleID, userID, teamID)
}

// UnassignRoleFromUserProject mocks base method.
func (m *MockIDBRole) UnassignRoleFromUserProject(ctx context.Context, roleID, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromUserProject", ctx, roleID, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromUserProject indicates an expected call of UnassignRoleFromUserProject.
func (mr *MockIDBRoleMockRecorder) UnassignRoleFromUserProject(ctx, roleID, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromUserProject", reflect.TypeOf((*MockIDBRole)(nil).UnassignRoleFromUserProject), ctx, roleID, userID, projectID)
}

// UnassignRoleFromUserTeam mocks base method.
func (m *MockIDBRole) UnassignRoleFromUserTeam(ctx context.Context, roleID, userID, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignRoleFromUserTeam", ctx, roleID, userID, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignRoleFromUserTeam indicates an expected call of UnassignRoleFromUserTeam.
func (mr *MockIDBRoleMockRecorder) UnassignRoleFromUserTeam(ctx, roleID, userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignRoleFromUserTeam", reflect.TypeOf((*MockIDBRole)(nil).UnassignRoleFromUserTeam), ctx, roleID, userID, teamID)
}

// UpdateRoleByID mocks base method.
func (m *MockIDBRole) UpdateRoleByID(ctx context.Context, id string, input *db.UpdateRoleByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleByID indicates an expected call of UpdateRoleByID.
func (mr *MockIDBRoleMockRecorder) UpdateRoleByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleByID", reflect.TypeOf((*MockIDBRole)(nil).UpdateRoleByID), ctx, id, input)
}

// MockIDBUser is a mock of IDBUser interface.
type MockIDBUser struct {
	ctrl     *gomock.Controller
	recorder *MockIDBUserMockRecorder
}

// MockIDBUserMockRecorder is the mock recorder for MockIDBUser.
type MockIDBUserMockRecorder struct {
	mock *MockIDBUser
}

// NewMockIDBUser creates a new mock instance.
func NewMockIDBUser(ctrl *gomock.Controller) *MockIDBUser {
	mock := &MockIDBUser{ctrl: ctrl}
	mock.recorder = &MockIDBUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBUser) EXPECT() *MockIDBUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIDBUser) CreateUser(ctx context.Context, input *db.CreateUserInput) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIDBUserMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIDBUser)(nil).CreateUser), ctx, input)
}

// DeleteUserByID mocks base method.
func (m *MockIDBUser) DeleteUserByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockIDBUserMockRecorder) DeleteUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockIDBUser)(nil).DeleteUserByID), ctx, id)
}

// GetUser mocks base method.
func (m *MockIDBUser) GetUser(ctx context.Context, input *db.GetUsersInput) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, input)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIDBUserMockRecorder) GetUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIDBUser)(nil).GetUser), ctx, input)
}

// GetUsers mocks base method.
func (m *MockIDBUser) GetUsers(ctx context.Context, input *db.GetUsersInput) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, input)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIDBUserMockRecorder) GetUsers(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIDBUser)(nil).GetUsers), ctx, input)
}

// UpdateUserByID mocks base method.
func (m *MockIDBUser) UpdateUserByID(ctx context.Context, id string, input *db.UpdateUserByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockIDBUserMockRecorder) UpdateUserByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockIDBUser)(nil).UpdateUserByID), ctx, id, input)
}

// MockIDBProject is a mock of IDBProject interface.
type MockIDBProject struct {
	ctrl     *gomock.Controller
	recorder *MockIDBProjectMockRecorder
}

// MockIDBProjectMockRecorder is the mock recorder for MockIDBProject.
type MockIDBProjectMockRecorder struct {
	mock *MockIDBProject
}

// NewMockIDBProject creates a new mock instance.
func NewMockIDBProject(ctrl *gomock.Controller) *MockIDBProject {
	mock := &MockIDBProject{ctrl: ctrl}
	mock.recorder = &MockIDBProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBProject) EXPECT() *MockIDBProjectMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockIDBProject) CreateProject(ctx context.Context, input *db.CreateProjectInput) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, input)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockIDBProjectMockRecorder) CreateProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockIDBProject)(nil).CreateProject), ctx, input)
}

// DeleteProjectByID mocks base method.
func (m *MockIDBProject) DeleteProjectByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectByID indicates an expected call of DeleteProjectByID.
func (mr *MockIDBProjectMockRecorder) DeleteProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectByID", reflect.TypeOf((*MockIDBProject)(nil).DeleteProjectByID), ctx, id)
}

// GetProject mocks base method.
func (m *MockIDBProject) GetProject(ctx context.Context, input *db.GetProjectsInput) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, input)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockIDBProjectMockRecorder) GetProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockIDBProject)(nil).GetProject), ctx, input)
}

// GetProjects mocks base method.
func (m *MockIDBProject) GetProjects(ctx context.Context, input *db.GetProjectsInput) ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx, input)
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockIDBProjectMockRecorder) GetProjects(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockIDBProject)(nil).GetProjects), ctx, input)
}

// UpdateProjectByID mocks base method.
func (m *MockIDBProject) UpdateProjectByID(ctx context.Context, id string, input *db.UpdateProjectByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectByID indicates an expected call of UpdateProjectByID.
func (mr *MockIDBProjectMockRecorder) UpdateProjectByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectByID", reflect.TypeOf((*MockIDBProject)(nil).UpdateProjectByID), ctx, id, input)
}

// MockIDBOrganization is a mock of IDBOrganization interface.
type MockIDBOrganization struct {
	ctrl     *gomock.Controller
	recorder *MockIDBOrganizationMockRecorder
}

// MockIDBOrganizationMockRecorder is the mock recorder for MockIDBOrganization.
type MockIDBOrganizationMockRecorder struct {
	mock *MockIDBOrganization
}

// NewMockIDBOrganization creates a new mock instance.
func NewMockIDBOrganization(ctrl *gomock.Controller) *MockIDBOrganization {
	mock := &MockIDBOrganization{ctrl: ctrl}
	mock.recorder = &MockIDBOrganizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBOrganization) EXPECT() *MockIDBOrganizationMockRecorder {
	return m.recorder
}

// CreateOrganization mocks base method.
func (m *MockIDBOrganization) CreateOrganization(ctx context.Context, input *db.CreateOrganizationInput) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, input)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockIDBOrganizationMockRecorder) CreateOrganization(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockIDBOrganization)(nil).CreateOrganization), ctx, input)
}

// DeleteOrganizationByID mocks base method.
func (m *MockIDBOrganization) DeleteOrganizationByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganizationByID indicates an expected call of DeleteOrganizationByID.
func (mr *MockIDBOrganizationMockRecorder) DeleteOrganizationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationByID", reflect.TypeOf((*MockIDBOrganization)(nil).DeleteOrganizationByID), ctx, id)
}

// GetOrganization mocks base method.
func (m *MockIDBOrganization) GetOrganization(ctx context.Context, input *db.GetOrganizationsInput) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, input)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockIDBOrganizationMockRecorder) GetOrganization(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockIDBOrganization)(nil).GetOrganization), ctx, input)
}

// GetOrganizations mocks base method.
func (m *MockIDBOrganization) GetOrganizations(ctx context.Context, input *db.GetOrganizationsInput) ([]model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations", ctx, input)
	ret0, _ := ret[0].([]model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockIDBOrganizationMockRecorder) GetOrganizations(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockIDBOrganization)(nil).GetOrganizations), ctx, input)
}

// UpdateOrganizationByID mocks base method.
func (m *MockIDBOrganization) UpdateOrganizationByID(ctx context.Context, id string, input *db.UpdateOrganizationByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganizationByID indicates an expected call of UpdateOrganizationByID.
func (mr *MockIDBOrganizationMockRecorder) UpdateOrganizationByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationByID", reflect.TypeOf((*MockIDBOrganization)(nil).UpdateOrganizationByID), ctx, id, input)
}

// MockIDBTeam is a mock of IDBTeam interface.
type MockIDBTeam struct {
	ctrl     *gomock.Controller
	recorder *MockIDBTeamMockRecorder
}

// MockIDBTeamMockRecorder is the mock recorder for MockIDBTeam.
type MockIDBTeamMockRecorder struct {
	mock *MockIDBTeam
}

// NewMockIDBTeam creates a new mock instance.
func NewMockIDBTeam(ctrl *gomock.Controller) *MockIDBTeam {
	mock := &MockIDBTeam{ctrl: ctrl}
	mock.recorder = &MockIDBTeamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBTeam) EXPECT() *MockIDBTeamMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockIDBTeam) CreateTeam(ctx context.Context, input *db.CreateTeamInput) (*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, input)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockIDBTeamMockRecorder) CreateTeam(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockIDBTeam)(nil).CreateTeam), ctx, input)
}

// DeleteTeamByID mocks base method.
func (m *MockIDBTeam) DeleteTeamByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamByID indicates an expected call of DeleteTeamByID.
func (mr *MockIDBTeamMockRecorder) DeleteTeamByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamByID", reflect.TypeOf((*MockIDBTeam)(nil).DeleteTeamByID), ctx, id)
}

// GetTeam mocks base method.
func (m *MockIDBTeam) GetTeam(ctx context.Context, input *db.GetTeamsInput) (*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, input)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockIDBTeamMockRecorder) GetTeam(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockIDBTeam)(nil).GetTeam), ctx, input)
}

// GetTeams mocks base method.
func (m *MockIDBTeam) GetTeams(ctx context.Context, input *db.GetTeamsInput) ([]model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx, input)
	ret0, _ := ret[0].([]model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockIDBTeamMockRecorder) GetTeams(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockIDBTeam)(nil).GetTeams), ctx, input)
}

// UpdateTeamByID mocks base method.
func (m *MockIDBTeam) UpdateTeamByID(ctx context.Context, id string, input *db.UpdateTeamByIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamByID", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeamByID indicates an expected call of UpdateTeamByID.
func (mr *MockIDBTeamMockRecorder) UpdateTeamByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamByID", reflect.TypeOf((*MockIDBTeam)(nil).UpdateTeamByID), ctx, id, input)
}
