// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	sqlmock "github.com/DATA-DOG/go-sqlmock"
	gomock "github.com/golang/mock/gomock"
	db "github.com/syunkitada/stadyapp/backends/iam/internal/domain/db"
	model "github.com/syunkitada/stadyapp/backends/iam/internal/domain/model"
)

// MockIDBCommon is a mock of IDBCommon interface.
type MockIDBCommon struct {
	ctrl     *gomock.Controller
	recorder *MockIDBCommonMockRecorder
}

// MockIDBCommonMockRecorder is the mock recorder for MockIDBCommon.
type MockIDBCommonMockRecorder struct {
	mock *MockIDBCommon
}

// NewMockIDBCommon creates a new mock instance.
func NewMockIDBCommon(ctrl *gomock.Controller) *MockIDBCommon {
	mock := &MockIDBCommon{ctrl: ctrl}
	mock.recorder = &MockIDBCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBCommon) EXPECT() *MockIDBCommonMockRecorder {
	return m.recorder
}

// MustClose mocks base method.
func (m *MockIDBCommon) MustClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustClose")
}

// MustClose indicates an expected call of MustClose.
func (mr *MockIDBCommonMockRecorder) MustClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustClose", reflect.TypeOf((*MockIDBCommon)(nil).MustClose))
}

// MustCreateDatabase mocks base method.
func (m *MockIDBCommon) MustCreateDatabase() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustCreateDatabase")
}

// MustCreateDatabase indicates an expected call of MustCreateDatabase.
func (mr *MockIDBCommonMockRecorder) MustCreateDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCreateDatabase", reflect.TypeOf((*MockIDBCommon)(nil).MustCreateDatabase))
}

// MustMigrate mocks base method.
func (m *MockIDBCommon) MustMigrate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustMigrate")
}

// MustMigrate indicates an expected call of MustMigrate.
func (mr *MockIDBCommonMockRecorder) MustMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMigrate", reflect.TypeOf((*MockIDBCommon)(nil).MustMigrate))
}

// MustOpen mocks base method.
func (m *MockIDBCommon) MustOpen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustOpen")
}

// MustOpen indicates an expected call of MustOpen.
func (mr *MockIDBCommonMockRecorder) MustOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpen", reflect.TypeOf((*MockIDBCommon)(nil).MustOpen))
}

// MustOpenMock mocks base method.
func (m *MockIDBCommon) MustOpenMock() sqlmock.Sqlmock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustOpenMock")
	ret0, _ := ret[0].(sqlmock.Sqlmock)
	return ret0
}

// MustOpenMock indicates an expected call of MustOpenMock.
func (mr *MockIDBCommonMockRecorder) MustOpenMock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpenMock", reflect.TypeOf((*MockIDBCommon)(nil).MustOpenMock))
}

// MustRecreateDatabase mocks base method.
func (m *MockIDBCommon) MustRecreateDatabase() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustRecreateDatabase")
}

// MustRecreateDatabase indicates an expected call of MustRecreateDatabase.
func (mr *MockIDBCommonMockRecorder) MustRecreateDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRecreateDatabase", reflect.TypeOf((*MockIDBCommon)(nil).MustRecreateDatabase))
}

// MockIDB is a mock of IDB interface.
type MockIDB struct {
	ctrl     *gomock.Controller
	recorder *MockIDBMockRecorder
}

// MockIDBMockRecorder is the mock recorder for MockIDB.
type MockIDBMockRecorder struct {
	mock *MockIDB
}

// NewMockIDB creates a new mock instance.
func NewMockIDB(ctrl *gomock.Controller) *MockIDB {
	mock := &MockIDB{ctrl: ctrl}
	mock.recorder = &MockIDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDB) EXPECT() *MockIDBMockRecorder {
	return m.recorder
}

// AddProject mocks base method.
func (m *MockIDB) AddProject(item *model.Project) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProject", item)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProject indicates an expected call of AddProject.
func (mr *MockIDBMockRecorder) AddProject(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProject", reflect.TypeOf((*MockIDB)(nil).AddProject), item)
}

// AddRole mocks base method.
func (m *MockIDB) AddRole(item *model.Role) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", item)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRole indicates an expected call of AddRole.
func (mr *MockIDBMockRecorder) AddRole(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockIDB)(nil).AddRole), item)
}

// DeleteProject mocks base method.
func (m *MockIDB) DeleteProject(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockIDBMockRecorder) DeleteProject(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockIDB)(nil).DeleteProject), id)
}

// DeleteRole mocks base method.
func (m *MockIDB) DeleteRole(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIDBMockRecorder) DeleteRole(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIDB)(nil).DeleteRole), id)
}

// FindProjects mocks base method.
func (m *MockIDB) FindProjects(input *db.FindProjectsInput) ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProjects", input)
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProjects indicates an expected call of FindProjects.
func (mr *MockIDBMockRecorder) FindProjects(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProjects", reflect.TypeOf((*MockIDB)(nil).FindProjects), input)
}

// FindRoles mocks base method.
func (m *MockIDB) FindRoles(input *db.FindRolesInput) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoles", input)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoles indicates an expected call of FindRoles.
func (mr *MockIDBMockRecorder) FindRoles(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoles", reflect.TypeOf((*MockIDB)(nil).FindRoles), input)
}

// MustClose mocks base method.
func (m *MockIDB) MustClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustClose")
}

// MustClose indicates an expected call of MustClose.
func (mr *MockIDBMockRecorder) MustClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustClose", reflect.TypeOf((*MockIDB)(nil).MustClose))
}

// MustCreateDatabase mocks base method.
func (m *MockIDB) MustCreateDatabase() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustCreateDatabase")
}

// MustCreateDatabase indicates an expected call of MustCreateDatabase.
func (mr *MockIDBMockRecorder) MustCreateDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCreateDatabase", reflect.TypeOf((*MockIDB)(nil).MustCreateDatabase))
}

// MustMigrate mocks base method.
func (m *MockIDB) MustMigrate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustMigrate")
}

// MustMigrate indicates an expected call of MustMigrate.
func (mr *MockIDBMockRecorder) MustMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMigrate", reflect.TypeOf((*MockIDB)(nil).MustMigrate))
}

// MustOpen mocks base method.
func (m *MockIDB) MustOpen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustOpen")
}

// MustOpen indicates an expected call of MustOpen.
func (mr *MockIDBMockRecorder) MustOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpen", reflect.TypeOf((*MockIDB)(nil).MustOpen))
}

// MustOpenMock mocks base method.
func (m *MockIDB) MustOpenMock() sqlmock.Sqlmock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustOpenMock")
	ret0, _ := ret[0].(sqlmock.Sqlmock)
	return ret0
}

// MustOpenMock indicates an expected call of MustOpenMock.
func (mr *MockIDBMockRecorder) MustOpenMock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustOpenMock", reflect.TypeOf((*MockIDB)(nil).MustOpenMock))
}

// MustRecreateDatabase mocks base method.
func (m *MockIDB) MustRecreateDatabase() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustRecreateDatabase")
}

// MustRecreateDatabase indicates an expected call of MustRecreateDatabase.
func (mr *MockIDBMockRecorder) MustRecreateDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRecreateDatabase", reflect.TypeOf((*MockIDB)(nil).MustRecreateDatabase))
}

// MockIDBProject is a mock of IDBProject interface.
type MockIDBProject struct {
	ctrl     *gomock.Controller
	recorder *MockIDBProjectMockRecorder
}

// MockIDBProjectMockRecorder is the mock recorder for MockIDBProject.
type MockIDBProjectMockRecorder struct {
	mock *MockIDBProject
}

// NewMockIDBProject creates a new mock instance.
func NewMockIDBProject(ctrl *gomock.Controller) *MockIDBProject {
	mock := &MockIDBProject{ctrl: ctrl}
	mock.recorder = &MockIDBProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBProject) EXPECT() *MockIDBProjectMockRecorder {
	return m.recorder
}

// AddProject mocks base method.
func (m *MockIDBProject) AddProject(item *model.Project) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProject", item)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProject indicates an expected call of AddProject.
func (mr *MockIDBProjectMockRecorder) AddProject(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProject", reflect.TypeOf((*MockIDBProject)(nil).AddProject), item)
}

// DeleteProject mocks base method.
func (m *MockIDBProject) DeleteProject(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockIDBProjectMockRecorder) DeleteProject(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockIDBProject)(nil).DeleteProject), id)
}

// FindProjects mocks base method.
func (m *MockIDBProject) FindProjects(input *db.FindProjectsInput) ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProjects", input)
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProjects indicates an expected call of FindProjects.
func (mr *MockIDBProjectMockRecorder) FindProjects(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProjects", reflect.TypeOf((*MockIDBProject)(nil).FindProjects), input)
}

// MockIDBRole is a mock of IDBRole interface.
type MockIDBRole struct {
	ctrl     *gomock.Controller
	recorder *MockIDBRoleMockRecorder
}

// MockIDBRoleMockRecorder is the mock recorder for MockIDBRole.
type MockIDBRoleMockRecorder struct {
	mock *MockIDBRole
}

// NewMockIDBRole creates a new mock instance.
func NewMockIDBRole(ctrl *gomock.Controller) *MockIDBRole {
	mock := &MockIDBRole{ctrl: ctrl}
	mock.recorder = &MockIDBRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBRole) EXPECT() *MockIDBRoleMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockIDBRole) AddRole(item *model.Role) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", item)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRole indicates an expected call of AddRole.
func (mr *MockIDBRoleMockRecorder) AddRole(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockIDBRole)(nil).AddRole), item)
}

// DeleteRole mocks base method.
func (m *MockIDBRole) DeleteRole(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIDBRoleMockRecorder) DeleteRole(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIDBRole)(nil).DeleteRole), id)
}

// FindRoles mocks base method.
func (m *MockIDBRole) FindRoles(input *db.FindRolesInput) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoles", input)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoles indicates an expected call of FindRoles.
func (mr *MockIDBRoleMockRecorder) FindRoles(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoles", reflect.TypeOf((*MockIDBRole)(nil).FindRoles), input)
}
