// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oapi "github.com/syunkitada/stadyapp/backends/iam/internal/iam-api/spec/oapi"
)

// MockIAPI is a mock of IAPI interface.
type MockIAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIMockRecorder
}

// MockIAPIMockRecorder is the mock recorder for MockIAPI.
type MockIAPIMockRecorder struct {
	mock *MockIAPI
}

// NewMockIAPI creates a new mock instance.
func NewMockIAPI(ctrl *gomock.Controller) *MockIAPI {
	mock := &MockIAPI{ctrl: ctrl}
	mock.recorder = &MockIAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPI) EXPECT() *MockIAPIMockRecorder {
	return m.recorder
}

// AddProject mocks base method.
func (m *MockIAPI) AddProject(ctx context.Context, item *oapi.NewProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProject", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProject indicates an expected call of AddProject.
func (mr *MockIAPIMockRecorder) AddProject(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProject", reflect.TypeOf((*MockIAPI)(nil).AddProject), ctx, item)
}

// AddRole mocks base method.
func (m *MockIAPI) AddRole(ctx context.Context, item *oapi.NewRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockIAPIMockRecorder) AddRole(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockIAPI)(nil).AddRole), ctx, item)
}

// CreateKeystoneProject mocks base method.
func (m *MockIAPI) CreateKeystoneProject(ctx context.Context, input *oapi.CreateKeystoneProjectInput) (*oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneProject", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneProject indicates an expected call of CreateKeystoneProject.
func (mr *MockIAPIMockRecorder) CreateKeystoneProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneProject", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneProject), ctx, input)
}

// CreateKeystoneRole mocks base method.
func (m *MockIAPI) CreateKeystoneRole(ctx context.Context, input *oapi.CreateKeystoneRoleInput) (*oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneRole", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneRole indicates an expected call of CreateKeystoneRole.
func (mr *MockIAPIMockRecorder) CreateKeystoneRole(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneRole", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneRole), ctx, input)
}

// CreateKeystoneToken mocks base method.
func (m *MockIAPI) CreateKeystoneToken(ctx context.Context, input *oapi.CreateKeystoneTokenInput) (*oapi.KeystoneToken, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneToken", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneToken)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateKeystoneToken indicates an expected call of CreateKeystoneToken.
func (mr *MockIAPIMockRecorder) CreateKeystoneToken(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneToken", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneToken), ctx, input)
}

// CreateKeystoneUser mocks base method.
func (m *MockIAPI) CreateKeystoneUser(ctx context.Context, input *oapi.CreateKeystoneUserInput) (*oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneUser", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneUser indicates an expected call of CreateKeystoneUser.
func (mr *MockIAPIMockRecorder) CreateKeystoneUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneUser", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneUser), ctx, input)
}

// DeleteKeystoneProject mocks base method.
func (m *MockIAPI) DeleteKeystoneProject(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneProject indicates an expected call of DeleteKeystoneProject.
func (mr *MockIAPIMockRecorder) DeleteKeystoneProject(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneProject", reflect.TypeOf((*MockIAPI)(nil).DeleteKeystoneProject), ctx, id)
}

// DeleteKeystoneRole mocks base method.
func (m *MockIAPI) DeleteKeystoneRole(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneRole indicates an expected call of DeleteKeystoneRole.
func (mr *MockIAPIMockRecorder) DeleteKeystoneRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneRole", reflect.TypeOf((*MockIAPI)(nil).DeleteKeystoneRole), ctx, id)
}

// DeleteKeystoneUser mocks base method.
func (m *MockIAPI) DeleteKeystoneUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneUser indicates an expected call of DeleteKeystoneUser.
func (mr *MockIAPIMockRecorder) DeleteKeystoneUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneUser", reflect.TypeOf((*MockIAPI)(nil).DeleteKeystoneUser), ctx, id)
}

// DeleteProject mocks base method.
func (m *MockIAPI) DeleteProject(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockIAPIMockRecorder) DeleteProject(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockIAPI)(nil).DeleteProject), ctx, id)
}

// DeleteRole mocks base method.
func (m *MockIAPI) DeleteRole(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIAPIMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIAPI)(nil).DeleteRole), ctx, id)
}

// FindProjectByID mocks base method.
func (m *MockIAPI) FindProjectByID(ctx context.Context, id uint64) (*oapi.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProjectByID", ctx, id)
	ret0, _ := ret[0].(*oapi.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProjectByID indicates an expected call of FindProjectByID.
func (mr *MockIAPIMockRecorder) FindProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProjectByID", reflect.TypeOf((*MockIAPI)(nil).FindProjectByID), ctx, id)
}

// FindProjects mocks base method.
func (m *MockIAPI) FindProjects(ctx context.Context, params oapi.FindProjectsParams) ([]oapi.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProjects", ctx, params)
	ret0, _ := ret[0].([]oapi.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProjects indicates an expected call of FindProjects.
func (mr *MockIAPIMockRecorder) FindProjects(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProjects", reflect.TypeOf((*MockIAPI)(nil).FindProjects), ctx, params)
}

// FindRoleByID mocks base method.
func (m *MockIAPI) FindRoleByID(ctx context.Context, id uint64) (*oapi.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoleByID", ctx, id)
	ret0, _ := ret[0].(*oapi.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoleByID indicates an expected call of FindRoleByID.
func (mr *MockIAPIMockRecorder) FindRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoleByID", reflect.TypeOf((*MockIAPI)(nil).FindRoleByID), ctx, id)
}

// FindRoles mocks base method.
func (m *MockIAPI) FindRoles(ctx context.Context, params oapi.FindRolesParams) ([]oapi.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoles", ctx, params)
	ret0, _ := ret[0].([]oapi.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoles indicates an expected call of FindRoles.
func (mr *MockIAPIMockRecorder) FindRoles(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoles", reflect.TypeOf((*MockIAPI)(nil).FindRoles), ctx, params)
}

// GetKeystoneProjectByID mocks base method.
func (m *MockIAPI) GetKeystoneProjectByID(ctx context.Context, id string) (*oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneProjectByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneProjectByID indicates an expected call of GetKeystoneProjectByID.
func (mr *MockIAPIMockRecorder) GetKeystoneProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneProjectByID", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneProjectByID), ctx, id)
}

// GetKeystoneProjects mocks base method.
func (m *MockIAPI) GetKeystoneProjects(ctx context.Context, input *oapi.GetKeystoneProjectsParams) ([]oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneProjects", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneProjects indicates an expected call of GetKeystoneProjects.
func (mr *MockIAPIMockRecorder) GetKeystoneProjects(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneProjects", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneProjects), ctx, input)
}

// GetKeystoneRoleByID mocks base method.
func (m *MockIAPI) GetKeystoneRoleByID(ctx context.Context, id string) (*oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneRoleByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneRoleByID indicates an expected call of GetKeystoneRoleByID.
func (mr *MockIAPIMockRecorder) GetKeystoneRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneRoleByID", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneRoleByID), ctx, id)
}

// GetKeystoneRoles mocks base method.
func (m *MockIAPI) GetKeystoneRoles(ctx context.Context, input *oapi.GetKeystoneRolesParams) ([]oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneRoles", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneRoles indicates an expected call of GetKeystoneRoles.
func (mr *MockIAPIMockRecorder) GetKeystoneRoles(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneRoles", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneRoles), ctx, input)
}

// GetKeystoneUserByID mocks base method.
func (m *MockIAPI) GetKeystoneUserByID(ctx context.Context, id string) (*oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneUserByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneUserByID indicates an expected call of GetKeystoneUserByID.
func (mr *MockIAPIMockRecorder) GetKeystoneUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneUserByID", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneUserByID), ctx, id)
}

// GetKeystoneUsers mocks base method.
func (m *MockIAPI) GetKeystoneUsers(ctx context.Context, input *oapi.GetKeystoneUsersParams) ([]oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneUsers", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneUsers indicates an expected call of GetKeystoneUsers.
func (mr *MockIAPIMockRecorder) GetKeystoneUsers(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneUsers", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneUsers), ctx, input)
}
