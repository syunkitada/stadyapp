// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oapi "github.com/syunkitada/stadyapp/backends/iam/internal/iam-api/spec/oapi"
)

// MockIAPI is a mock of IAPI interface.
type MockIAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIMockRecorder
}

// MockIAPIMockRecorder is the mock recorder for MockIAPI.
type MockIAPIMockRecorder struct {
	mock *MockIAPI
}

// NewMockIAPI creates a new mock instance.
func NewMockIAPI(ctrl *gomock.Controller) *MockIAPI {
	mock := &MockIAPI{ctrl: ctrl}
	mock.recorder = &MockIAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPI) EXPECT() *MockIAPIMockRecorder {
	return m.recorder
}

// AssignKeystoneRoleToGroupProject mocks base method.
func (m *MockIAPI) AssignKeystoneRoleToGroupProject(ctx context.Context, roleID, groupID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignKeystoneRoleToGroupProject", ctx, roleID, groupID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignKeystoneRoleToGroupProject indicates an expected call of AssignKeystoneRoleToGroupProject.
func (mr *MockIAPIMockRecorder) AssignKeystoneRoleToGroupProject(ctx, roleID, groupID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignKeystoneRoleToGroupProject", reflect.TypeOf((*MockIAPI)(nil).AssignKeystoneRoleToGroupProject), ctx, roleID, groupID, projectID)
}

// AssignKeystoneRoleToUserDomain mocks base method.
func (m *MockIAPI) AssignKeystoneRoleToUserDomain(ctx context.Context, roleID, userID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignKeystoneRoleToUserDomain", ctx, roleID, userID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignKeystoneRoleToUserDomain indicates an expected call of AssignKeystoneRoleToUserDomain.
func (mr *MockIAPIMockRecorder) AssignKeystoneRoleToUserDomain(ctx, roleID, userID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignKeystoneRoleToUserDomain", reflect.TypeOf((*MockIAPI)(nil).AssignKeystoneRoleToUserDomain), ctx, roleID, userID, domainID)
}

// AssignKeystoneRoleToUserProject mocks base method.
func (m *MockIAPI) AssignKeystoneRoleToUserProject(ctx context.Context, roleID, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignKeystoneRoleToUserProject", ctx, roleID, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignKeystoneRoleToUserProject indicates an expected call of AssignKeystoneRoleToUserProject.
func (mr *MockIAPIMockRecorder) AssignKeystoneRoleToUserProject(ctx, roleID, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignKeystoneRoleToUserProject", reflect.TypeOf((*MockIAPI)(nil).AssignKeystoneRoleToUserProject), ctx, roleID, userID, projectID)
}

// CreateKeystoneDomain mocks base method.
func (m *MockIAPI) CreateKeystoneDomain(ctx context.Context, input *oapi.CreateKeystoneDomainInput) (*oapi.KeystoneDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneDomain", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneDomain indicates an expected call of CreateKeystoneDomain.
func (mr *MockIAPIMockRecorder) CreateKeystoneDomain(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneDomain", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneDomain), ctx, input)
}

// CreateKeystoneProject mocks base method.
func (m *MockIAPI) CreateKeystoneProject(ctx context.Context, input *oapi.CreateKeystoneProjectInput) (*oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneProject", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneProject indicates an expected call of CreateKeystoneProject.
func (mr *MockIAPIMockRecorder) CreateKeystoneProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneProject", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneProject), ctx, input)
}

// CreateKeystoneRole mocks base method.
func (m *MockIAPI) CreateKeystoneRole(ctx context.Context, input *oapi.CreateKeystoneRoleInput) (*oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneRole", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneRole indicates an expected call of CreateKeystoneRole.
func (mr *MockIAPIMockRecorder) CreateKeystoneRole(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneRole", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneRole), ctx, input)
}

// CreateKeystoneToken mocks base method.
func (m *MockIAPI) CreateKeystoneToken(ctx context.Context, input *oapi.CreateKeystoneTokenInput) (*oapi.KeystoneToken, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneToken", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneToken)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateKeystoneToken indicates an expected call of CreateKeystoneToken.
func (mr *MockIAPIMockRecorder) CreateKeystoneToken(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneToken", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneToken), ctx, input)
}

// CreateKeystoneUser mocks base method.
func (m *MockIAPI) CreateKeystoneUser(ctx context.Context, input *oapi.CreateKeystoneUserInput) (*oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneUser", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneUser indicates an expected call of CreateKeystoneUser.
func (mr *MockIAPIMockRecorder) CreateKeystoneUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneUser", reflect.TypeOf((*MockIAPI)(nil).CreateKeystoneUser), ctx, input)
}

// DeleteKeystoneDomain mocks base method.
func (m *MockIAPI) DeleteKeystoneDomain(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneDomain", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneDomain indicates an expected call of DeleteKeystoneDomain.
func (mr *MockIAPIMockRecorder) DeleteKeystoneDomain(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneDomain", reflect.TypeOf((*MockIAPI)(nil).DeleteKeystoneDomain), ctx, id)
}

// DeleteKeystoneProject mocks base method.
func (m *MockIAPI) DeleteKeystoneProject(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneProject indicates an expected call of DeleteKeystoneProject.
func (mr *MockIAPIMockRecorder) DeleteKeystoneProject(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneProject", reflect.TypeOf((*MockIAPI)(nil).DeleteKeystoneProject), ctx, id)
}

// DeleteKeystoneRole mocks base method.
func (m *MockIAPI) DeleteKeystoneRole(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneRole indicates an expected call of DeleteKeystoneRole.
func (mr *MockIAPIMockRecorder) DeleteKeystoneRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneRole", reflect.TypeOf((*MockIAPI)(nil).DeleteKeystoneRole), ctx, id)
}

// DeleteKeystoneUser mocks base method.
func (m *MockIAPI) DeleteKeystoneUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneUser indicates an expected call of DeleteKeystoneUser.
func (mr *MockIAPIMockRecorder) DeleteKeystoneUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneUser", reflect.TypeOf((*MockIAPI)(nil).DeleteKeystoneUser), ctx, id)
}

// GetKeystoneDomainByID mocks base method.
func (m *MockIAPI) GetKeystoneDomainByID(ctx context.Context, id string) (*oapi.KeystoneDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneDomainByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneDomainByID indicates an expected call of GetKeystoneDomainByID.
func (mr *MockIAPIMockRecorder) GetKeystoneDomainByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneDomainByID", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneDomainByID), ctx, id)
}

// GetKeystoneDomains mocks base method.
func (m *MockIAPI) GetKeystoneDomains(ctx context.Context, input *oapi.GetKeystoneDomainsParams) ([]oapi.KeystoneDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneDomains", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneDomains indicates an expected call of GetKeystoneDomains.
func (mr *MockIAPIMockRecorder) GetKeystoneDomains(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneDomains", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneDomains), ctx, input)
}

// GetKeystoneGroupByID mocks base method.
func (m *MockIAPI) GetKeystoneGroupByID(ctx context.Context, id string) (*oapi.KeystoneGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneGroupByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneGroupByID indicates an expected call of GetKeystoneGroupByID.
func (mr *MockIAPIMockRecorder) GetKeystoneGroupByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneGroupByID", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneGroupByID), ctx, id)
}

// GetKeystoneGroups mocks base method.
func (m *MockIAPI) GetKeystoneGroups(ctx context.Context, input *oapi.GetKeystoneGroupsParams) ([]oapi.KeystoneGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneGroups", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneGroups indicates an expected call of GetKeystoneGroups.
func (mr *MockIAPIMockRecorder) GetKeystoneGroups(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneGroups", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneGroups), ctx, input)
}

// GetKeystoneProjectByID mocks base method.
func (m *MockIAPI) GetKeystoneProjectByID(ctx context.Context, id string) (*oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneProjectByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneProjectByID indicates an expected call of GetKeystoneProjectByID.
func (mr *MockIAPIMockRecorder) GetKeystoneProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneProjectByID", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneProjectByID), ctx, id)
}

// GetKeystoneProjects mocks base method.
func (m *MockIAPI) GetKeystoneProjects(ctx context.Context, input *oapi.GetKeystoneProjectsParams) ([]oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneProjects", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneProjects indicates an expected call of GetKeystoneProjects.
func (mr *MockIAPIMockRecorder) GetKeystoneProjects(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneProjects", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneProjects), ctx, input)
}

// GetKeystoneRoleAssignments mocks base method.
func (m *MockIAPI) GetKeystoneRoleAssignments(ctx context.Context, input *oapi.GetKeystoneRoleAssignmentsParams) ([]oapi.KeystoneRoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneRoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneRoleAssignments indicates an expected call of GetKeystoneRoleAssignments.
func (mr *MockIAPIMockRecorder) GetKeystoneRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneRoleAssignments", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneRoleAssignments), ctx, input)
}

// GetKeystoneRoleByID mocks base method.
func (m *MockIAPI) GetKeystoneRoleByID(ctx context.Context, id string) (*oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneRoleByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneRoleByID indicates an expected call of GetKeystoneRoleByID.
func (mr *MockIAPIMockRecorder) GetKeystoneRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneRoleByID", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneRoleByID), ctx, id)
}

// GetKeystoneRoles mocks base method.
func (m *MockIAPI) GetKeystoneRoles(ctx context.Context, input *oapi.GetKeystoneRolesParams) ([]oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneRoles", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneRoles indicates an expected call of GetKeystoneRoles.
func (mr *MockIAPIMockRecorder) GetKeystoneRoles(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneRoles", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneRoles), ctx, input)
}

// GetKeystoneUserByID mocks base method.
func (m *MockIAPI) GetKeystoneUserByID(ctx context.Context, id string) (*oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneUserByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneUserByID indicates an expected call of GetKeystoneUserByID.
func (mr *MockIAPIMockRecorder) GetKeystoneUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneUserByID", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneUserByID), ctx, id)
}

// GetKeystoneUserProjects mocks base method.
func (m *MockIAPI) GetKeystoneUserProjects(ctx context.Context, userID string) ([]oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneUserProjects", ctx, userID)
	ret0, _ := ret[0].([]oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneUserProjects indicates an expected call of GetKeystoneUserProjects.
func (mr *MockIAPIMockRecorder) GetKeystoneUserProjects(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneUserProjects", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneUserProjects), ctx, userID)
}

// GetKeystoneUsers mocks base method.
func (m *MockIAPI) GetKeystoneUsers(ctx context.Context, input *oapi.GetKeystoneUsersParams) ([]oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneUsers", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneUsers indicates an expected call of GetKeystoneUsers.
func (mr *MockIAPIMockRecorder) GetKeystoneUsers(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneUsers", reflect.TypeOf((*MockIAPI)(nil).GetKeystoneUsers), ctx, input)
}

// GetPubkeys mocks base method.
func (m *MockIAPI) GetPubkeys(ctx context.Context, input *oapi.GetPubkeysParams) ([]oapi.Pubkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubkeys", ctx, input)
	ret0, _ := ret[0].([]oapi.Pubkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubkeys indicates an expected call of GetPubkeys.
func (mr *MockIAPIMockRecorder) GetPubkeys(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubkeys", reflect.TypeOf((*MockIAPI)(nil).GetPubkeys), ctx, input)
}

// UnassignKeystoneRoleFromGroupProject mocks base method.
func (m *MockIAPI) UnassignKeystoneRoleFromGroupProject(ctx context.Context, roleID, groupID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignKeystoneRoleFromGroupProject", ctx, roleID, groupID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignKeystoneRoleFromGroupProject indicates an expected call of UnassignKeystoneRoleFromGroupProject.
func (mr *MockIAPIMockRecorder) UnassignKeystoneRoleFromGroupProject(ctx, roleID, groupID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignKeystoneRoleFromGroupProject", reflect.TypeOf((*MockIAPI)(nil).UnassignKeystoneRoleFromGroupProject), ctx, roleID, groupID, projectID)
}

// UnassignKeystoneRoleFromUserDomain mocks base method.
func (m *MockIAPI) UnassignKeystoneRoleFromUserDomain(ctx context.Context, roleID, userID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignKeystoneRoleFromUserDomain", ctx, roleID, userID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignKeystoneRoleFromUserDomain indicates an expected call of UnassignKeystoneRoleFromUserDomain.
func (mr *MockIAPIMockRecorder) UnassignKeystoneRoleFromUserDomain(ctx, roleID, userID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignKeystoneRoleFromUserDomain", reflect.TypeOf((*MockIAPI)(nil).UnassignKeystoneRoleFromUserDomain), ctx, roleID, userID, domainID)
}

// UnassignKeystoneRoleFromUserProject mocks base method.
func (m *MockIAPI) UnassignKeystoneRoleFromUserProject(ctx context.Context, roleID, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignKeystoneRoleFromUserProject", ctx, roleID, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignKeystoneRoleFromUserProject indicates an expected call of UnassignKeystoneRoleFromUserProject.
func (mr *MockIAPIMockRecorder) UnassignKeystoneRoleFromUserProject(ctx, roleID, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignKeystoneRoleFromUserProject", reflect.TypeOf((*MockIAPI)(nil).UnassignKeystoneRoleFromUserProject), ctx, roleID, userID, projectID)
}

// UpdateKeystoneDomainByID mocks base method.
func (m *MockIAPI) UpdateKeystoneDomainByID(ctx context.Context, id string, input *oapi.UpdateKeystoneDomainInput) (*oapi.KeystoneDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeystoneDomainByID", ctx, id, input)
	ret0, _ := ret[0].(*oapi.KeystoneDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeystoneDomainByID indicates an expected call of UpdateKeystoneDomainByID.
func (mr *MockIAPIMockRecorder) UpdateKeystoneDomainByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeystoneDomainByID", reflect.TypeOf((*MockIAPI)(nil).UpdateKeystoneDomainByID), ctx, id, input)
}

// UpdateKeystoneProjectByID mocks base method.
func (m *MockIAPI) UpdateKeystoneProjectByID(ctx context.Context, id string, input *oapi.UpdateKeystoneProjectInput) (*oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeystoneProjectByID", ctx, id, input)
	ret0, _ := ret[0].(*oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeystoneProjectByID indicates an expected call of UpdateKeystoneProjectByID.
func (mr *MockIAPIMockRecorder) UpdateKeystoneProjectByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeystoneProjectByID", reflect.TypeOf((*MockIAPI)(nil).UpdateKeystoneProjectByID), ctx, id, input)
}

// UpdateKeystoneRoleByID mocks base method.
func (m *MockIAPI) UpdateKeystoneRoleByID(ctx context.Context, id string, input *oapi.UpdateKeystoneRoleInput) (*oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeystoneRoleByID", ctx, id, input)
	ret0, _ := ret[0].(*oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeystoneRoleByID indicates an expected call of UpdateKeystoneRoleByID.
func (mr *MockIAPIMockRecorder) UpdateKeystoneRoleByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeystoneRoleByID", reflect.TypeOf((*MockIAPI)(nil).UpdateKeystoneRoleByID), ctx, id, input)
}

// MockIAPIOther is a mock of IAPIOther interface.
type MockIAPIOther struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIOtherMockRecorder
}

// MockIAPIOtherMockRecorder is the mock recorder for MockIAPIOther.
type MockIAPIOtherMockRecorder struct {
	mock *MockIAPIOther
}

// NewMockIAPIOther creates a new mock instance.
func NewMockIAPIOther(ctrl *gomock.Controller) *MockIAPIOther {
	mock := &MockIAPIOther{ctrl: ctrl}
	mock.recorder = &MockIAPIOtherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIOther) EXPECT() *MockIAPIOtherMockRecorder {
	return m.recorder
}

// GetPubkeys mocks base method.
func (m *MockIAPIOther) GetPubkeys(ctx context.Context, input *oapi.GetPubkeysParams) ([]oapi.Pubkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubkeys", ctx, input)
	ret0, _ := ret[0].([]oapi.Pubkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubkeys indicates an expected call of GetPubkeys.
func (mr *MockIAPIOtherMockRecorder) GetPubkeys(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubkeys", reflect.TypeOf((*MockIAPIOther)(nil).GetPubkeys), ctx, input)
}

// MockIAPIKeystoneToken is a mock of IAPIKeystoneToken interface.
type MockIAPIKeystoneToken struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeystoneTokenMockRecorder
}

// MockIAPIKeystoneTokenMockRecorder is the mock recorder for MockIAPIKeystoneToken.
type MockIAPIKeystoneTokenMockRecorder struct {
	mock *MockIAPIKeystoneToken
}

// NewMockIAPIKeystoneToken creates a new mock instance.
func NewMockIAPIKeystoneToken(ctrl *gomock.Controller) *MockIAPIKeystoneToken {
	mock := &MockIAPIKeystoneToken{ctrl: ctrl}
	mock.recorder = &MockIAPIKeystoneTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeystoneToken) EXPECT() *MockIAPIKeystoneTokenMockRecorder {
	return m.recorder
}

// CreateKeystoneToken mocks base method.
func (m *MockIAPIKeystoneToken) CreateKeystoneToken(ctx context.Context, input *oapi.CreateKeystoneTokenInput) (*oapi.KeystoneToken, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneToken", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneToken)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateKeystoneToken indicates an expected call of CreateKeystoneToken.
func (mr *MockIAPIKeystoneTokenMockRecorder) CreateKeystoneToken(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneToken", reflect.TypeOf((*MockIAPIKeystoneToken)(nil).CreateKeystoneToken), ctx, input)
}

// MockIAPIKeystoneDomain is a mock of IAPIKeystoneDomain interface.
type MockIAPIKeystoneDomain struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeystoneDomainMockRecorder
}

// MockIAPIKeystoneDomainMockRecorder is the mock recorder for MockIAPIKeystoneDomain.
type MockIAPIKeystoneDomainMockRecorder struct {
	mock *MockIAPIKeystoneDomain
}

// NewMockIAPIKeystoneDomain creates a new mock instance.
func NewMockIAPIKeystoneDomain(ctrl *gomock.Controller) *MockIAPIKeystoneDomain {
	mock := &MockIAPIKeystoneDomain{ctrl: ctrl}
	mock.recorder = &MockIAPIKeystoneDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeystoneDomain) EXPECT() *MockIAPIKeystoneDomainMockRecorder {
	return m.recorder
}

// CreateKeystoneDomain mocks base method.
func (m *MockIAPIKeystoneDomain) CreateKeystoneDomain(ctx context.Context, input *oapi.CreateKeystoneDomainInput) (*oapi.KeystoneDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneDomain", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneDomain indicates an expected call of CreateKeystoneDomain.
func (mr *MockIAPIKeystoneDomainMockRecorder) CreateKeystoneDomain(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneDomain", reflect.TypeOf((*MockIAPIKeystoneDomain)(nil).CreateKeystoneDomain), ctx, input)
}

// DeleteKeystoneDomain mocks base method.
func (m *MockIAPIKeystoneDomain) DeleteKeystoneDomain(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneDomain", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneDomain indicates an expected call of DeleteKeystoneDomain.
func (mr *MockIAPIKeystoneDomainMockRecorder) DeleteKeystoneDomain(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneDomain", reflect.TypeOf((*MockIAPIKeystoneDomain)(nil).DeleteKeystoneDomain), ctx, id)
}

// GetKeystoneDomainByID mocks base method.
func (m *MockIAPIKeystoneDomain) GetKeystoneDomainByID(ctx context.Context, id string) (*oapi.KeystoneDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneDomainByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneDomainByID indicates an expected call of GetKeystoneDomainByID.
func (mr *MockIAPIKeystoneDomainMockRecorder) GetKeystoneDomainByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneDomainByID", reflect.TypeOf((*MockIAPIKeystoneDomain)(nil).GetKeystoneDomainByID), ctx, id)
}

// GetKeystoneDomains mocks base method.
func (m *MockIAPIKeystoneDomain) GetKeystoneDomains(ctx context.Context, input *oapi.GetKeystoneDomainsParams) ([]oapi.KeystoneDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneDomains", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneDomains indicates an expected call of GetKeystoneDomains.
func (mr *MockIAPIKeystoneDomainMockRecorder) GetKeystoneDomains(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneDomains", reflect.TypeOf((*MockIAPIKeystoneDomain)(nil).GetKeystoneDomains), ctx, input)
}

// UpdateKeystoneDomainByID mocks base method.
func (m *MockIAPIKeystoneDomain) UpdateKeystoneDomainByID(ctx context.Context, id string, input *oapi.UpdateKeystoneDomainInput) (*oapi.KeystoneDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeystoneDomainByID", ctx, id, input)
	ret0, _ := ret[0].(*oapi.KeystoneDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeystoneDomainByID indicates an expected call of UpdateKeystoneDomainByID.
func (mr *MockIAPIKeystoneDomainMockRecorder) UpdateKeystoneDomainByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeystoneDomainByID", reflect.TypeOf((*MockIAPIKeystoneDomain)(nil).UpdateKeystoneDomainByID), ctx, id, input)
}

// MockIAPIKeystoneProject is a mock of IAPIKeystoneProject interface.
type MockIAPIKeystoneProject struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeystoneProjectMockRecorder
}

// MockIAPIKeystoneProjectMockRecorder is the mock recorder for MockIAPIKeystoneProject.
type MockIAPIKeystoneProjectMockRecorder struct {
	mock *MockIAPIKeystoneProject
}

// NewMockIAPIKeystoneProject creates a new mock instance.
func NewMockIAPIKeystoneProject(ctrl *gomock.Controller) *MockIAPIKeystoneProject {
	mock := &MockIAPIKeystoneProject{ctrl: ctrl}
	mock.recorder = &MockIAPIKeystoneProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeystoneProject) EXPECT() *MockIAPIKeystoneProjectMockRecorder {
	return m.recorder
}

// CreateKeystoneProject mocks base method.
func (m *MockIAPIKeystoneProject) CreateKeystoneProject(ctx context.Context, input *oapi.CreateKeystoneProjectInput) (*oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneProject", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneProject indicates an expected call of CreateKeystoneProject.
func (mr *MockIAPIKeystoneProjectMockRecorder) CreateKeystoneProject(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneProject", reflect.TypeOf((*MockIAPIKeystoneProject)(nil).CreateKeystoneProject), ctx, input)
}

// DeleteKeystoneProject mocks base method.
func (m *MockIAPIKeystoneProject) DeleteKeystoneProject(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneProject indicates an expected call of DeleteKeystoneProject.
func (mr *MockIAPIKeystoneProjectMockRecorder) DeleteKeystoneProject(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneProject", reflect.TypeOf((*MockIAPIKeystoneProject)(nil).DeleteKeystoneProject), ctx, id)
}

// GetKeystoneProjectByID mocks base method.
func (m *MockIAPIKeystoneProject) GetKeystoneProjectByID(ctx context.Context, id string) (*oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneProjectByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneProjectByID indicates an expected call of GetKeystoneProjectByID.
func (mr *MockIAPIKeystoneProjectMockRecorder) GetKeystoneProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneProjectByID", reflect.TypeOf((*MockIAPIKeystoneProject)(nil).GetKeystoneProjectByID), ctx, id)
}

// GetKeystoneProjects mocks base method.
func (m *MockIAPIKeystoneProject) GetKeystoneProjects(ctx context.Context, input *oapi.GetKeystoneProjectsParams) ([]oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneProjects", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneProjects indicates an expected call of GetKeystoneProjects.
func (mr *MockIAPIKeystoneProjectMockRecorder) GetKeystoneProjects(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneProjects", reflect.TypeOf((*MockIAPIKeystoneProject)(nil).GetKeystoneProjects), ctx, input)
}

// GetKeystoneUserProjects mocks base method.
func (m *MockIAPIKeystoneProject) GetKeystoneUserProjects(ctx context.Context, userID string) ([]oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneUserProjects", ctx, userID)
	ret0, _ := ret[0].([]oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneUserProjects indicates an expected call of GetKeystoneUserProjects.
func (mr *MockIAPIKeystoneProjectMockRecorder) GetKeystoneUserProjects(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneUserProjects", reflect.TypeOf((*MockIAPIKeystoneProject)(nil).GetKeystoneUserProjects), ctx, userID)
}

// UpdateKeystoneProjectByID mocks base method.
func (m *MockIAPIKeystoneProject) UpdateKeystoneProjectByID(ctx context.Context, id string, input *oapi.UpdateKeystoneProjectInput) (*oapi.KeystoneProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeystoneProjectByID", ctx, id, input)
	ret0, _ := ret[0].(*oapi.KeystoneProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeystoneProjectByID indicates an expected call of UpdateKeystoneProjectByID.
func (mr *MockIAPIKeystoneProjectMockRecorder) UpdateKeystoneProjectByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeystoneProjectByID", reflect.TypeOf((*MockIAPIKeystoneProject)(nil).UpdateKeystoneProjectByID), ctx, id, input)
}

// MockIAPIKeystoneUser is a mock of IAPIKeystoneUser interface.
type MockIAPIKeystoneUser struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeystoneUserMockRecorder
}

// MockIAPIKeystoneUserMockRecorder is the mock recorder for MockIAPIKeystoneUser.
type MockIAPIKeystoneUserMockRecorder struct {
	mock *MockIAPIKeystoneUser
}

// NewMockIAPIKeystoneUser creates a new mock instance.
func NewMockIAPIKeystoneUser(ctrl *gomock.Controller) *MockIAPIKeystoneUser {
	mock := &MockIAPIKeystoneUser{ctrl: ctrl}
	mock.recorder = &MockIAPIKeystoneUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeystoneUser) EXPECT() *MockIAPIKeystoneUserMockRecorder {
	return m.recorder
}

// CreateKeystoneUser mocks base method.
func (m *MockIAPIKeystoneUser) CreateKeystoneUser(ctx context.Context, input *oapi.CreateKeystoneUserInput) (*oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneUser", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneUser indicates an expected call of CreateKeystoneUser.
func (mr *MockIAPIKeystoneUserMockRecorder) CreateKeystoneUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneUser", reflect.TypeOf((*MockIAPIKeystoneUser)(nil).CreateKeystoneUser), ctx, input)
}

// DeleteKeystoneUser mocks base method.
func (m *MockIAPIKeystoneUser) DeleteKeystoneUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneUser indicates an expected call of DeleteKeystoneUser.
func (mr *MockIAPIKeystoneUserMockRecorder) DeleteKeystoneUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneUser", reflect.TypeOf((*MockIAPIKeystoneUser)(nil).DeleteKeystoneUser), ctx, id)
}

// GetKeystoneUserByID mocks base method.
func (m *MockIAPIKeystoneUser) GetKeystoneUserByID(ctx context.Context, id string) (*oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneUserByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneUserByID indicates an expected call of GetKeystoneUserByID.
func (mr *MockIAPIKeystoneUserMockRecorder) GetKeystoneUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneUserByID", reflect.TypeOf((*MockIAPIKeystoneUser)(nil).GetKeystoneUserByID), ctx, id)
}

// GetKeystoneUsers mocks base method.
func (m *MockIAPIKeystoneUser) GetKeystoneUsers(ctx context.Context, input *oapi.GetKeystoneUsersParams) ([]oapi.KeystoneUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneUsers", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneUsers indicates an expected call of GetKeystoneUsers.
func (mr *MockIAPIKeystoneUserMockRecorder) GetKeystoneUsers(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneUsers", reflect.TypeOf((*MockIAPIKeystoneUser)(nil).GetKeystoneUsers), ctx, input)
}

// MockIAPIKeystoneGroup is a mock of IAPIKeystoneGroup interface.
type MockIAPIKeystoneGroup struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeystoneGroupMockRecorder
}

// MockIAPIKeystoneGroupMockRecorder is the mock recorder for MockIAPIKeystoneGroup.
type MockIAPIKeystoneGroupMockRecorder struct {
	mock *MockIAPIKeystoneGroup
}

// NewMockIAPIKeystoneGroup creates a new mock instance.
func NewMockIAPIKeystoneGroup(ctrl *gomock.Controller) *MockIAPIKeystoneGroup {
	mock := &MockIAPIKeystoneGroup{ctrl: ctrl}
	mock.recorder = &MockIAPIKeystoneGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeystoneGroup) EXPECT() *MockIAPIKeystoneGroupMockRecorder {
	return m.recorder
}

// GetKeystoneGroupByID mocks base method.
func (m *MockIAPIKeystoneGroup) GetKeystoneGroupByID(ctx context.Context, id string) (*oapi.KeystoneGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneGroupByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneGroupByID indicates an expected call of GetKeystoneGroupByID.
func (mr *MockIAPIKeystoneGroupMockRecorder) GetKeystoneGroupByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneGroupByID", reflect.TypeOf((*MockIAPIKeystoneGroup)(nil).GetKeystoneGroupByID), ctx, id)
}

// GetKeystoneGroups mocks base method.
func (m *MockIAPIKeystoneGroup) GetKeystoneGroups(ctx context.Context, input *oapi.GetKeystoneGroupsParams) ([]oapi.KeystoneGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneGroups", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneGroups indicates an expected call of GetKeystoneGroups.
func (mr *MockIAPIKeystoneGroupMockRecorder) GetKeystoneGroups(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneGroups", reflect.TypeOf((*MockIAPIKeystoneGroup)(nil).GetKeystoneGroups), ctx, input)
}

// MockIAPIKeystoneRole is a mock of IAPIKeystoneRole interface.
type MockIAPIKeystoneRole struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeystoneRoleMockRecorder
}

// MockIAPIKeystoneRoleMockRecorder is the mock recorder for MockIAPIKeystoneRole.
type MockIAPIKeystoneRoleMockRecorder struct {
	mock *MockIAPIKeystoneRole
}

// NewMockIAPIKeystoneRole creates a new mock instance.
func NewMockIAPIKeystoneRole(ctrl *gomock.Controller) *MockIAPIKeystoneRole {
	mock := &MockIAPIKeystoneRole{ctrl: ctrl}
	mock.recorder = &MockIAPIKeystoneRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeystoneRole) EXPECT() *MockIAPIKeystoneRoleMockRecorder {
	return m.recorder
}

// AssignKeystoneRoleToGroupProject mocks base method.
func (m *MockIAPIKeystoneRole) AssignKeystoneRoleToGroupProject(ctx context.Context, roleID, groupID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignKeystoneRoleToGroupProject", ctx, roleID, groupID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignKeystoneRoleToGroupProject indicates an expected call of AssignKeystoneRoleToGroupProject.
func (mr *MockIAPIKeystoneRoleMockRecorder) AssignKeystoneRoleToGroupProject(ctx, roleID, groupID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignKeystoneRoleToGroupProject", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).AssignKeystoneRoleToGroupProject), ctx, roleID, groupID, projectID)
}

// AssignKeystoneRoleToUserDomain mocks base method.
func (m *MockIAPIKeystoneRole) AssignKeystoneRoleToUserDomain(ctx context.Context, roleID, userID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignKeystoneRoleToUserDomain", ctx, roleID, userID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignKeystoneRoleToUserDomain indicates an expected call of AssignKeystoneRoleToUserDomain.
func (mr *MockIAPIKeystoneRoleMockRecorder) AssignKeystoneRoleToUserDomain(ctx, roleID, userID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignKeystoneRoleToUserDomain", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).AssignKeystoneRoleToUserDomain), ctx, roleID, userID, domainID)
}

// AssignKeystoneRoleToUserProject mocks base method.
func (m *MockIAPIKeystoneRole) AssignKeystoneRoleToUserProject(ctx context.Context, roleID, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignKeystoneRoleToUserProject", ctx, roleID, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignKeystoneRoleToUserProject indicates an expected call of AssignKeystoneRoleToUserProject.
func (mr *MockIAPIKeystoneRoleMockRecorder) AssignKeystoneRoleToUserProject(ctx, roleID, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignKeystoneRoleToUserProject", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).AssignKeystoneRoleToUserProject), ctx, roleID, userID, projectID)
}

// CreateKeystoneRole mocks base method.
func (m *MockIAPIKeystoneRole) CreateKeystoneRole(ctx context.Context, input *oapi.CreateKeystoneRoleInput) (*oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeystoneRole", ctx, input)
	ret0, _ := ret[0].(*oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeystoneRole indicates an expected call of CreateKeystoneRole.
func (mr *MockIAPIKeystoneRoleMockRecorder) CreateKeystoneRole(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeystoneRole", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).CreateKeystoneRole), ctx, input)
}

// DeleteKeystoneRole mocks base method.
func (m *MockIAPIKeystoneRole) DeleteKeystoneRole(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeystoneRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeystoneRole indicates an expected call of DeleteKeystoneRole.
func (mr *MockIAPIKeystoneRoleMockRecorder) DeleteKeystoneRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeystoneRole", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).DeleteKeystoneRole), ctx, id)
}

// GetKeystoneRoleAssignments mocks base method.
func (m *MockIAPIKeystoneRole) GetKeystoneRoleAssignments(ctx context.Context, input *oapi.GetKeystoneRoleAssignmentsParams) ([]oapi.KeystoneRoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneRoleAssignments", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneRoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneRoleAssignments indicates an expected call of GetKeystoneRoleAssignments.
func (mr *MockIAPIKeystoneRoleMockRecorder) GetKeystoneRoleAssignments(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneRoleAssignments", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).GetKeystoneRoleAssignments), ctx, input)
}

// GetKeystoneRoleByID mocks base method.
func (m *MockIAPIKeystoneRole) GetKeystoneRoleByID(ctx context.Context, id string) (*oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneRoleByID", ctx, id)
	ret0, _ := ret[0].(*oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneRoleByID indicates an expected call of GetKeystoneRoleByID.
func (mr *MockIAPIKeystoneRoleMockRecorder) GetKeystoneRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneRoleByID", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).GetKeystoneRoleByID), ctx, id)
}

// GetKeystoneRoles mocks base method.
func (m *MockIAPIKeystoneRole) GetKeystoneRoles(ctx context.Context, input *oapi.GetKeystoneRolesParams) ([]oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeystoneRoles", ctx, input)
	ret0, _ := ret[0].([]oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeystoneRoles indicates an expected call of GetKeystoneRoles.
func (mr *MockIAPIKeystoneRoleMockRecorder) GetKeystoneRoles(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeystoneRoles", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).GetKeystoneRoles), ctx, input)
}

// UnassignKeystoneRoleFromGroupProject mocks base method.
func (m *MockIAPIKeystoneRole) UnassignKeystoneRoleFromGroupProject(ctx context.Context, roleID, groupID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignKeystoneRoleFromGroupProject", ctx, roleID, groupID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignKeystoneRoleFromGroupProject indicates an expected call of UnassignKeystoneRoleFromGroupProject.
func (mr *MockIAPIKeystoneRoleMockRecorder) UnassignKeystoneRoleFromGroupProject(ctx, roleID, groupID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignKeystoneRoleFromGroupProject", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).UnassignKeystoneRoleFromGroupProject), ctx, roleID, groupID, projectID)
}

// UnassignKeystoneRoleFromUserDomain mocks base method.
func (m *MockIAPIKeystoneRole) UnassignKeystoneRoleFromUserDomain(ctx context.Context, roleID, userID, domainID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignKeystoneRoleFromUserDomain", ctx, roleID, userID, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignKeystoneRoleFromUserDomain indicates an expected call of UnassignKeystoneRoleFromUserDomain.
func (mr *MockIAPIKeystoneRoleMockRecorder) UnassignKeystoneRoleFromUserDomain(ctx, roleID, userID, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignKeystoneRoleFromUserDomain", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).UnassignKeystoneRoleFromUserDomain), ctx, roleID, userID, domainID)
}

// UnassignKeystoneRoleFromUserProject mocks base method.
func (m *MockIAPIKeystoneRole) UnassignKeystoneRoleFromUserProject(ctx context.Context, roleID, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignKeystoneRoleFromUserProject", ctx, roleID, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignKeystoneRoleFromUserProject indicates an expected call of UnassignKeystoneRoleFromUserProject.
func (mr *MockIAPIKeystoneRoleMockRecorder) UnassignKeystoneRoleFromUserProject(ctx, roleID, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignKeystoneRoleFromUserProject", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).UnassignKeystoneRoleFromUserProject), ctx, roleID, userID, projectID)
}

// UpdateKeystoneRoleByID mocks base method.
func (m *MockIAPIKeystoneRole) UpdateKeystoneRoleByID(ctx context.Context, id string, input *oapi.UpdateKeystoneRoleInput) (*oapi.KeystoneRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeystoneRoleByID", ctx, id, input)
	ret0, _ := ret[0].(*oapi.KeystoneRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeystoneRoleByID indicates an expected call of UpdateKeystoneRoleByID.
func (mr *MockIAPIKeystoneRoleMockRecorder) UpdateKeystoneRoleByID(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeystoneRoleByID", reflect.TypeOf((*MockIAPIKeystoneRole)(nil).UpdateKeystoneRoleByID), ctx, id, input)
}
