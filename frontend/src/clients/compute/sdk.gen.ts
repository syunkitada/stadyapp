// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { GetGlanceVersionData, GetGlanceVersionResponse, GetGlanceVersionError, GetGlanceImagesData, GetGlanceImagesResponse, GetGlanceImagesError, CreateGlanceImageData, CreateGlanceImageResponse, CreateGlanceImageError, DeleteGlanceImageByIdData, DeleteGlanceImageByIdResponse, DeleteGlanceImageByIdError, GetGlanceImageByIdData, GetGlanceImageByIdResponse, GetGlanceImageByIdError, GetGlanceImageFileByIdData, GetGlanceImageFileByIdResponse, GetGlanceImageFileByIdError, UploadGlanceImageFileData, UploadGlanceImageFileResponse, UploadGlanceImageFileError, GetGlanceSchemasImageData, GetGlanceSchemasImageResponse, GetGlanceSchemasImageError, GetNovaVersionData, GetNovaVersionResponse, GetNovaVersionError, GetNovaServicesData, GetNovaServicesResponse, GetNovaServicesError, CreateNovaServerData, CreateNovaServerResponse, CreateNovaServerError, DeleteNovaServerByIdData, DeleteNovaServerByIdResponse, DeleteNovaServerByIdError, GetNovaServerByIdData, GetNovaServerByIdResponse, GetNovaServerByIdError, ActionNovaServerData, ActionNovaServerResponse, ActionNovaServerError, GetNovaServersDetailData, GetNovaServersDetailResponse, GetNovaServersDetailError, CreateNovaFlavorData, CreateNovaFlavorResponse, CreateNovaFlavorError, GetNovaFlavorsDetailData, GetNovaFlavorsDetailResponse, GetNovaFlavorsDetailError, GetNovaFlavorByIdData, GetNovaFlavorByIdResponse, GetNovaFlavorByIdError, CreateNovaExternalEventsData, CreateNovaExternalEventsResponse, CreateNovaExternalEventsError, GetNeutronVersionData, GetNeutronVersionResponse, GetNeutronVersionError, GetNeutronNetworksData, GetNeutronNetworksResponse, GetNeutronNetworksError, CreateNeutronNetworkData, CreateNeutronNetworkResponse, CreateNeutronNetworkError, DeleteNeutronNetworkByIdData, DeleteNeutronNetworkByIdResponse, DeleteNeutronNetworkByIdError, GetNeutronNetworkByIdData, GetNeutronNetworkByIdResponse, GetNeutronNetworkByIdError, GetNeutronSubnetsData, GetNeutronSubnetsResponse, GetNeutronSubnetsError, CreateNeutronSubnetData, CreateNeutronSubnetResponse, CreateNeutronSubnetError, DeleteNeutronSubnetByIdData, DeleteNeutronSubnetByIdResponse, DeleteNeutronSubnetByIdError, GetNeutronSubnetByIdData, GetNeutronSubnetByIdResponse, GetNeutronSubnetByIdError, GetNeutronQuotasByProjectIdData, GetNeutronQuotasByProjectIdResponse, GetNeutronQuotasByProjectIdError, GetNeutronAgentsData, GetNeutronAgentsResponse, GetNeutronAgentsError, GetNeutronPortsData, GetNeutronPortsResponse, GetNeutronPortsError, CreateNeutronPortData, CreateNeutronPortResponse, CreateNeutronPortError, DeleteNeutronPortByIdData, DeleteNeutronPortByIdResponse, DeleteNeutronPortByIdError, GetNeutronPortByIdData, GetNeutronPortByIdResponse, GetNeutronPortByIdError, UpdateNeutronPortByIdData, UpdateNeutronPortByIdResponse, UpdateNeutronPortByIdError, GetNeutronSecurityGroupsData, GetNeutronSecurityGroupsResponse, GetNeutronSecurityGroupsError, GetNeutronExtensionsData, GetNeutronExtensionsResponse, GetNeutronExtensionsError, GetPlacementVersionData, GetPlacementVersionResponse, GetPlacementVersionError, GetPlacementVersion2Data, GetPlacementVersion2Response, GetPlacementVersion2Error, GetPlacementTraitsData, GetPlacementTraitsResponse, GetPlacementTraitsError, GetPlacementResourceProvidersData, GetPlacementResourceProvidersResponse, GetPlacementResourceProvidersError, CreatePlacementResourceProviderData, CreatePlacementResourceProviderResponse, CreatePlacementResourceProviderError, GetPlacementResourceProviderAllocationsData, GetPlacementResourceProviderAllocationsResponse, GetPlacementResourceProviderAllocationsError, GetPlacementResourceProviderInventoriesData, GetPlacementResourceProviderInventoriesResponse, GetPlacementResourceProviderInventoriesError, UpdatePlacementResourceProviderInventoryData, UpdatePlacementResourceProviderInventoryResponse, UpdatePlacementResourceProviderInventoryError, GetPlacementResourceProviderAggregatesData, GetPlacementResourceProviderAggregatesResponse, GetPlacementResourceProviderAggregatesError, GetPlacementResourceProviderTraitsData, GetPlacementResourceProviderTraitsResponse, GetPlacementResourceProviderTraitsError, UpdatePlacementResourceProviderTraitsData, UpdatePlacementResourceProviderTraitsResponse, UpdatePlacementResourceProviderTraitsError, DeletePlacementAllocationByIdData, DeletePlacementAllocationByIdResponse, DeletePlacementAllocationByIdError, GetPlacementAllocationByIdData, GetPlacementAllocationByIdResponse, GetPlacementAllocationByIdError, UpdatePlacementAllocationByIdData, UpdatePlacementAllocationByIdResponse, UpdatePlacementAllocationByIdError, GetPlacementAllocationCandidatesData, GetPlacementAllocationCandidatesResponse, GetPlacementAllocationCandidatesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Get glance version
 * Get glance version
 */
export const getGlanceVersion = <ThrowOnError extends boolean = false>(options?: Options<GetGlanceVersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGlanceVersionResponse, GetGlanceVersionError, ThrowOnError>({
        url: '/glance/v2',
        ...options
    });
};

/**
 * Get glance images
 * Get glance images
 */
export const getGlanceImages = <ThrowOnError extends boolean = false>(options?: Options<GetGlanceImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGlanceImagesResponse, GetGlanceImagesError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/glance/v2/images',
        ...options
    });
};

/**
 * Create a new glance image
 * Create a new glance image
 */
export const createGlanceImage = <ThrowOnError extends boolean = false>(options?: Options<CreateGlanceImageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateGlanceImageResponse, CreateGlanceImageError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/glance/v2/images',
        ...options
    });
};

/**
 * Delete a image by ID
 * Delete a image by ID
 */
export const deleteGlanceImageById = <ThrowOnError extends boolean = false>(options: Options<DeleteGlanceImageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGlanceImageByIdResponse, DeleteGlanceImageByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/glance/v2/images/{id}',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const getGlanceImageById = <ThrowOnError extends boolean = false>(options: Options<GetGlanceImageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGlanceImageByIdResponse, GetGlanceImageByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/glance/v2/images/{id}',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const getGlanceImageFileById = <ThrowOnError extends boolean = false>(options: Options<GetGlanceImageFileByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGlanceImageFileByIdResponse, GetGlanceImageFileByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/glance/v2/images/{id}/file',
        ...options
    });
};

/**
 * Upload a new glance image
 * Upload a new glance image
 */
export const uploadGlanceImageFile = <ThrowOnError extends boolean = false>(options: Options<UploadGlanceImageFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UploadGlanceImageFileResponse, UploadGlanceImageFileError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/glance/v2/images/{id}/file',
        ...options
    });
};

/**
 * Get glance images
 * Get glance images
 */
export const getGlanceSchemasImage = <ThrowOnError extends boolean = false>(options?: Options<GetGlanceSchemasImageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGlanceSchemasImageResponse, GetGlanceSchemasImageError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/glance/v2/schemas/image',
        ...options
    });
};

/**
 * Get nova version
 * Get nova version
 */
export const getNovaVersion = <ThrowOnError extends boolean = false>(options?: Options<GetNovaVersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNovaVersionResponse, GetNovaVersionError, ThrowOnError>({
        url: '/nova/v2.1',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getNovaServices = <ThrowOnError extends boolean = false>(options?: Options<GetNovaServicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNovaServicesResponse, GetNovaServicesError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/os-services',
        ...options
    });
};

/**
 * Create a new server
 * Creates a new server instance using the specified parameters.
 */
export const createNovaServer = <ThrowOnError extends boolean = false>(options: Options<CreateNovaServerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNovaServerResponse, CreateNovaServerError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/servers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a server by ID
 * Delete a server by ID
 */
export const deleteNovaServerById = <ThrowOnError extends boolean = false>(options: Options<DeleteNovaServerByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNovaServerByIdResponse, DeleteNovaServerByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/servers/{id}',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getNovaServerById = <ThrowOnError extends boolean = false>(options: Options<GetNovaServerByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNovaServerByIdResponse, GetNovaServerByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/servers/{id}',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const actionNovaServer = <ThrowOnError extends boolean = false>(options: Options<ActionNovaServerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ActionNovaServerResponse, ActionNovaServerError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/servers/{id}/action',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get nova servers
 * Get nova servers
 */
export const getNovaServersDetail = <ThrowOnError extends boolean = false>(options?: Options<GetNovaServersDetailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNovaServersDetailResponse, GetNovaServersDetailError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/servers/detail',
        ...options
    });
};

/**
 * Create nova flavors
 * Create nova flavors
 */
export const createNovaFlavor = <ThrowOnError extends boolean = false>(options?: Options<CreateNovaFlavorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateNovaFlavorResponse, CreateNovaFlavorError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/flavors',
        ...options
    });
};

/**
 * Get nova flavors
 * Get nova flavors
 */
export const getNovaFlavorsDetail = <ThrowOnError extends boolean = false>(options?: Options<GetNovaFlavorsDetailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNovaFlavorsDetailResponse, GetNovaFlavorsDetailError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/flavors/detail',
        ...options
    });
};

/**
 * Get a flavor by ID
 * Get a flavor by ID
 */
export const getNovaFlavorById = <ThrowOnError extends boolean = false>(options: Options<GetNovaFlavorByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNovaFlavorByIdResponse, GetNovaFlavorByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/flavors/{id}',
        ...options
    });
};

/**
 * Create a new glance image
 * Create a new glance image
 */
export const createNovaExternalEvents = <ThrowOnError extends boolean = false>(options?: Options<CreateNovaExternalEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateNovaExternalEventsResponse, CreateNovaExternalEventsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/nova/v2.1/os-server-external-events',
        ...options
    });
};

/**
 * Get neutron version
 * Get neutron version
 */
export const getNeutronVersion = <ThrowOnError extends boolean = false>(options?: Options<GetNeutronVersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNeutronVersionResponse, GetNeutronVersionError, ThrowOnError>({
        url: '/neutron/v2.0',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getNeutronNetworks = <ThrowOnError extends boolean = false>(options?: Options<GetNeutronNetworksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNeutronNetworksResponse, GetNeutronNetworksError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/networks',
        ...options
    });
};

/**
 * Create detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const createNeutronNetwork = <ThrowOnError extends boolean = false>(options?: Options<CreateNeutronNetworkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateNeutronNetworkResponse, CreateNeutronNetworkError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/networks',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const deleteNeutronNetworkById = <ThrowOnError extends boolean = false>(options: Options<DeleteNeutronNetworkByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNeutronNetworkByIdResponse, DeleteNeutronNetworkByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/networks/{id}',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getNeutronNetworkById = <ThrowOnError extends boolean = false>(options: Options<GetNeutronNetworkByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNeutronNetworkByIdResponse, GetNeutronNetworkByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/networks/{id}',
        ...options
    });
};

/**
 * Get detailed information about subnets
 * Retrieves a detailed list of subnets with their attributes.
 */
export const getNeutronSubnets = <ThrowOnError extends boolean = false>(options?: Options<GetNeutronSubnetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNeutronSubnetsResponse, GetNeutronSubnetsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/subnets',
        ...options
    });
};

/**
 * Create detailed information about subnets
 * Retrieves a detailed list of subnets with their attributes.
 */
export const createNeutronSubnet = <ThrowOnError extends boolean = false>(options?: Options<CreateNeutronSubnetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateNeutronSubnetResponse, CreateNeutronSubnetError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/subnets',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const deleteNeutronSubnetById = <ThrowOnError extends boolean = false>(options: Options<DeleteNeutronSubnetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNeutronSubnetByIdResponse, DeleteNeutronSubnetByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/subnets/{id}',
        ...options
    });
};

/**
 * Get detailed information about subnets
 * Retrieves a detailed list of subnets with their attributes.
 */
export const getNeutronSubnetById = <ThrowOnError extends boolean = false>(options: Options<GetNeutronSubnetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNeutronSubnetByIdResponse, GetNeutronSubnetByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/subnets/{id}',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getNeutronQuotasByProjectId = <ThrowOnError extends boolean = false>(options: Options<GetNeutronQuotasByProjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNeutronQuotasByProjectIdResponse, GetNeutronQuotasByProjectIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/quotas/{project_id}',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getNeutronAgents = <ThrowOnError extends boolean = false>(options?: Options<GetNeutronAgentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNeutronAgentsResponse, GetNeutronAgentsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/agents',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getNeutronPorts = <ThrowOnError extends boolean = false>(options?: Options<GetNeutronPortsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNeutronPortsResponse, GetNeutronPortsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/ports',
        ...options
    });
};

/**
 * Create a new glance image
 * Create a new glance image
 */
export const createNeutronPort = <ThrowOnError extends boolean = false>(options?: Options<CreateNeutronPortData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateNeutronPortResponse, CreateNeutronPortError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/ports',
        ...options
    });
};

/**
 * Delete a image by ID
 * Delete a image by ID
 */
export const deleteNeutronPortById = <ThrowOnError extends boolean = false>(options: Options<DeleteNeutronPortByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNeutronPortByIdResponse, DeleteNeutronPortByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/ports/{id}',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const getNeutronPortById = <ThrowOnError extends boolean = false>(options: Options<GetNeutronPortByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNeutronPortByIdResponse, GetNeutronPortByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/ports/{id}',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const updateNeutronPortById = <ThrowOnError extends boolean = false>(options: Options<UpdateNeutronPortByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateNeutronPortByIdResponse, UpdateNeutronPortByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/ports/{id}',
        ...options
    });
};

/**
 * Get glance images
 * Get glance images
 */
export const getNeutronSecurityGroups = <ThrowOnError extends boolean = false>(options?: Options<GetNeutronSecurityGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNeutronSecurityGroupsResponse, GetNeutronSecurityGroupsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/security-groups',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getNeutronExtensions = <ThrowOnError extends boolean = false>(options?: Options<GetNeutronExtensionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNeutronExtensionsResponse, GetNeutronExtensionsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/neutron/v2.0/extensions',
        ...options
    });
};

/**
 * Get placement version
 * Get placement version
 */
export const getPlacementVersion = <ThrowOnError extends boolean = false>(options?: Options<GetPlacementVersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlacementVersionResponse, GetPlacementVersionError, ThrowOnError>({
        url: '/placement',
        ...options
    });
};

/**
 * Get placement version
 * Get placement version
 */
export const getPlacementVersion2 = <ThrowOnError extends boolean = false>(options?: Options<GetPlacementVersion2Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlacementVersion2Response, GetPlacementVersion2Error, ThrowOnError>({
        url: '/placement/',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getPlacementTraits = <ThrowOnError extends boolean = false>(options?: Options<GetPlacementTraitsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlacementTraitsResponse, GetPlacementTraitsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/traits',
        ...options
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getPlacementResourceProviders = <ThrowOnError extends boolean = false>(options?: Options<GetPlacementResourceProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlacementResourceProvidersResponse, GetPlacementResourceProvidersError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/resource_providers',
        ...options
    });
};

/**
 * Create detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const createPlacementResourceProvider = <ThrowOnError extends boolean = false>(options?: Options<CreatePlacementResourceProviderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreatePlacementResourceProviderResponse, CreatePlacementResourceProviderError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/resource_providers',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const getPlacementResourceProviderAllocations = <ThrowOnError extends boolean = false>(options: Options<GetPlacementResourceProviderAllocationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlacementResourceProviderAllocationsResponse, GetPlacementResourceProviderAllocationsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/resource_providers/{id}/allocations',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const getPlacementResourceProviderInventories = <ThrowOnError extends boolean = false>(options: Options<GetPlacementResourceProviderInventoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlacementResourceProviderInventoriesResponse, GetPlacementResourceProviderInventoriesError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/resource_providers/{id}/inventories',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const updatePlacementResourceProviderInventory = <ThrowOnError extends boolean = false>(options: Options<UpdatePlacementResourceProviderInventoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePlacementResourceProviderInventoryResponse, UpdatePlacementResourceProviderInventoryError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/resource_providers/{id}/inventories',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const getPlacementResourceProviderAggregates = <ThrowOnError extends boolean = false>(options: Options<GetPlacementResourceProviderAggregatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlacementResourceProviderAggregatesResponse, GetPlacementResourceProviderAggregatesError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/resource_providers/{id}/aggregates',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const getPlacementResourceProviderTraits = <ThrowOnError extends boolean = false>(options: Options<GetPlacementResourceProviderTraitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlacementResourceProviderTraitsResponse, GetPlacementResourceProviderTraitsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/resource_providers/{id}/traits',
        ...options
    });
};

/**
 * Get a image by ID
 * Get a image by ID
 */
export const updatePlacementResourceProviderTraits = <ThrowOnError extends boolean = false>(options: Options<UpdatePlacementResourceProviderTraitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePlacementResourceProviderTraitsResponse, UpdatePlacementResourceProviderTraitsError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/resource_providers/{id}/traits',
        ...options
    });
};

/**
 * Delete a allocation by ID
 * Delete a allocation by ID
 */
export const deletePlacementAllocationById = <ThrowOnError extends boolean = false>(options: Options<DeletePlacementAllocationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePlacementAllocationByIdResponse, DeletePlacementAllocationByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/allocations/{id}',
        ...options
    });
};

/**
 * Get a allocation by ID
 * Get a allocation by ID
 */
export const getPlacementAllocationById = <ThrowOnError extends boolean = false>(options: Options<GetPlacementAllocationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlacementAllocationByIdResponse, GetPlacementAllocationByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/allocations/{id}',
        ...options
    });
};

/**
 * Create a new server
 * Creates a new server instance using the specified parameters.
 */
export const updatePlacementAllocationById = <ThrowOnError extends boolean = false>(options: Options<UpdatePlacementAllocationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePlacementAllocationByIdResponse, UpdatePlacementAllocationByIdError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/allocations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get detailed information about networks
 * Retrieves a detailed list of networks with their attributes.
 */
export const getPlacementAllocationCandidates = <ThrowOnError extends boolean = false>(options?: Options<GetPlacementAllocationCandidatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlacementAllocationCandidatesResponse, GetPlacementAllocationCandidatesError, ThrowOnError>({
        security: [
            {
                name: 'x-auth-token',
                type: 'apiKey'
            }
        ],
        url: '/placement/allocation_candidates',
        ...options
    });
};